
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Setores
 * 
 */
export type Setores = $Result.DefaultSelection<Prisma.$SetoresPayload>
/**
 * Model Curso
 * 
 */
export type Curso = $Result.DefaultSelection<Prisma.$CursoPayload>
/**
 * Model CursoValor
 * 
 */
export type CursoValor = $Result.DefaultSelection<Prisma.$CursoValorPayload>
/**
 * Model Professores
 * 
 */
export type Professores = $Result.DefaultSelection<Prisma.$ProfessoresPayload>
/**
 * Model Unidades
 * 
 */
export type Unidades = $Result.DefaultSelection<Prisma.$UnidadesPayload>
/**
 * Model Pagina
 * 
 */
export type Pagina = $Result.DefaultSelection<Prisma.$PaginaPayload>
/**
 * Model TipoDocumento
 * 
 */
export type TipoDocumento = $Result.DefaultSelection<Prisma.$TipoDocumentoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs>;

  /**
   * `prisma.setores`: Exposes CRUD operations for the **Setores** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Setores
    * const setores = await prisma.setores.findMany()
    * ```
    */
  get setores(): Prisma.SetoresDelegate<ExtArgs>;

  /**
   * `prisma.curso`: Exposes CRUD operations for the **Curso** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cursos
    * const cursos = await prisma.curso.findMany()
    * ```
    */
  get curso(): Prisma.CursoDelegate<ExtArgs>;

  /**
   * `prisma.cursoValor`: Exposes CRUD operations for the **CursoValor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CursoValors
    * const cursoValors = await prisma.cursoValor.findMany()
    * ```
    */
  get cursoValor(): Prisma.CursoValorDelegate<ExtArgs>;

  /**
   * `prisma.professores`: Exposes CRUD operations for the **Professores** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Professores
    * const professores = await prisma.professores.findMany()
    * ```
    */
  get professores(): Prisma.ProfessoresDelegate<ExtArgs>;

  /**
   * `prisma.unidades`: Exposes CRUD operations for the **Unidades** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Unidades
    * const unidades = await prisma.unidades.findMany()
    * ```
    */
  get unidades(): Prisma.UnidadesDelegate<ExtArgs>;

  /**
   * `prisma.pagina`: Exposes CRUD operations for the **Pagina** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Paginas
    * const paginas = await prisma.pagina.findMany()
    * ```
    */
  get pagina(): Prisma.PaginaDelegate<ExtArgs>;

  /**
   * `prisma.tipoDocumento`: Exposes CRUD operations for the **TipoDocumento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TipoDocumentos
    * const tipoDocumentos = await prisma.tipoDocumento.findMany()
    * ```
    */
  get tipoDocumento(): Prisma.TipoDocumentoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.11.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Setores: 'Setores',
    Curso: 'Curso',
    CursoValor: 'CursoValor',
    Professores: 'Professores',
    Unidades: 'Unidades',
    Pagina: 'Pagina',
    TipoDocumento: 'TipoDocumento'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'usuario' | 'setores' | 'curso' | 'cursoValor' | 'professores' | 'unidades' | 'pagina' | 'tipoDocumento'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Setores: {
        payload: Prisma.$SetoresPayload<ExtArgs>
        fields: Prisma.SetoresFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SetoresFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SetoresPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SetoresFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SetoresPayload>
          }
          findFirst: {
            args: Prisma.SetoresFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SetoresPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SetoresFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SetoresPayload>
          }
          findMany: {
            args: Prisma.SetoresFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SetoresPayload>[]
          }
          create: {
            args: Prisma.SetoresCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SetoresPayload>
          }
          createMany: {
            args: Prisma.SetoresCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SetoresDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SetoresPayload>
          }
          update: {
            args: Prisma.SetoresUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SetoresPayload>
          }
          deleteMany: {
            args: Prisma.SetoresDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SetoresUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SetoresUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SetoresPayload>
          }
          aggregate: {
            args: Prisma.SetoresAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSetores>
          }
          groupBy: {
            args: Prisma.SetoresGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SetoresGroupByOutputType>[]
          }
          count: {
            args: Prisma.SetoresCountArgs<ExtArgs>,
            result: $Utils.Optional<SetoresCountAggregateOutputType> | number
          }
        }
      }
      Curso: {
        payload: Prisma.$CursoPayload<ExtArgs>
        fields: Prisma.CursoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CursoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CursoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>
          }
          findFirst: {
            args: Prisma.CursoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CursoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>
          }
          findMany: {
            args: Prisma.CursoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>[]
          }
          create: {
            args: Prisma.CursoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>
          }
          createMany: {
            args: Prisma.CursoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CursoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>
          }
          update: {
            args: Prisma.CursoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>
          }
          deleteMany: {
            args: Prisma.CursoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CursoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CursoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>
          }
          aggregate: {
            args: Prisma.CursoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCurso>
          }
          groupBy: {
            args: Prisma.CursoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CursoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CursoCountArgs<ExtArgs>,
            result: $Utils.Optional<CursoCountAggregateOutputType> | number
          }
        }
      }
      CursoValor: {
        payload: Prisma.$CursoValorPayload<ExtArgs>
        fields: Prisma.CursoValorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CursoValorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoValorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CursoValorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoValorPayload>
          }
          findFirst: {
            args: Prisma.CursoValorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoValorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CursoValorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoValorPayload>
          }
          findMany: {
            args: Prisma.CursoValorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoValorPayload>[]
          }
          create: {
            args: Prisma.CursoValorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoValorPayload>
          }
          createMany: {
            args: Prisma.CursoValorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CursoValorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoValorPayload>
          }
          update: {
            args: Prisma.CursoValorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoValorPayload>
          }
          deleteMany: {
            args: Prisma.CursoValorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CursoValorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CursoValorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoValorPayload>
          }
          aggregate: {
            args: Prisma.CursoValorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCursoValor>
          }
          groupBy: {
            args: Prisma.CursoValorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CursoValorGroupByOutputType>[]
          }
          count: {
            args: Prisma.CursoValorCountArgs<ExtArgs>,
            result: $Utils.Optional<CursoValorCountAggregateOutputType> | number
          }
        }
      }
      Professores: {
        payload: Prisma.$ProfessoresPayload<ExtArgs>
        fields: Prisma.ProfessoresFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessoresFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessoresPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessoresFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessoresPayload>
          }
          findFirst: {
            args: Prisma.ProfessoresFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessoresPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessoresFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessoresPayload>
          }
          findMany: {
            args: Prisma.ProfessoresFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessoresPayload>[]
          }
          create: {
            args: Prisma.ProfessoresCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessoresPayload>
          }
          createMany: {
            args: Prisma.ProfessoresCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProfessoresDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessoresPayload>
          }
          update: {
            args: Prisma.ProfessoresUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessoresPayload>
          }
          deleteMany: {
            args: Prisma.ProfessoresDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessoresUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProfessoresUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessoresPayload>
          }
          aggregate: {
            args: Prisma.ProfessoresAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProfessores>
          }
          groupBy: {
            args: Prisma.ProfessoresGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProfessoresGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessoresCountArgs<ExtArgs>,
            result: $Utils.Optional<ProfessoresCountAggregateOutputType> | number
          }
        }
      }
      Unidades: {
        payload: Prisma.$UnidadesPayload<ExtArgs>
        fields: Prisma.UnidadesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UnidadesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UnidadesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UnidadesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UnidadesPayload>
          }
          findFirst: {
            args: Prisma.UnidadesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UnidadesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UnidadesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UnidadesPayload>
          }
          findMany: {
            args: Prisma.UnidadesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UnidadesPayload>[]
          }
          create: {
            args: Prisma.UnidadesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UnidadesPayload>
          }
          createMany: {
            args: Prisma.UnidadesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UnidadesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UnidadesPayload>
          }
          update: {
            args: Prisma.UnidadesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UnidadesPayload>
          }
          deleteMany: {
            args: Prisma.UnidadesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UnidadesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UnidadesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UnidadesPayload>
          }
          aggregate: {
            args: Prisma.UnidadesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUnidades>
          }
          groupBy: {
            args: Prisma.UnidadesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UnidadesGroupByOutputType>[]
          }
          count: {
            args: Prisma.UnidadesCountArgs<ExtArgs>,
            result: $Utils.Optional<UnidadesCountAggregateOutputType> | number
          }
        }
      }
      Pagina: {
        payload: Prisma.$PaginaPayload<ExtArgs>
        fields: Prisma.PaginaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaginaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaginaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaginaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaginaPayload>
          }
          findFirst: {
            args: Prisma.PaginaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaginaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaginaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaginaPayload>
          }
          findMany: {
            args: Prisma.PaginaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaginaPayload>[]
          }
          create: {
            args: Prisma.PaginaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaginaPayload>
          }
          createMany: {
            args: Prisma.PaginaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PaginaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaginaPayload>
          }
          update: {
            args: Prisma.PaginaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaginaPayload>
          }
          deleteMany: {
            args: Prisma.PaginaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PaginaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PaginaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaginaPayload>
          }
          aggregate: {
            args: Prisma.PaginaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePagina>
          }
          groupBy: {
            args: Prisma.PaginaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PaginaGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaginaCountArgs<ExtArgs>,
            result: $Utils.Optional<PaginaCountAggregateOutputType> | number
          }
        }
      }
      TipoDocumento: {
        payload: Prisma.$TipoDocumentoPayload<ExtArgs>
        fields: Prisma.TipoDocumentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TipoDocumentoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoDocumentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TipoDocumentoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoDocumentoPayload>
          }
          findFirst: {
            args: Prisma.TipoDocumentoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoDocumentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TipoDocumentoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoDocumentoPayload>
          }
          findMany: {
            args: Prisma.TipoDocumentoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoDocumentoPayload>[]
          }
          create: {
            args: Prisma.TipoDocumentoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoDocumentoPayload>
          }
          createMany: {
            args: Prisma.TipoDocumentoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TipoDocumentoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoDocumentoPayload>
          }
          update: {
            args: Prisma.TipoDocumentoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoDocumentoPayload>
          }
          deleteMany: {
            args: Prisma.TipoDocumentoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TipoDocumentoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TipoDocumentoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoDocumentoPayload>
          }
          aggregate: {
            args: Prisma.TipoDocumentoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTipoDocumento>
          }
          groupBy: {
            args: Prisma.TipoDocumentoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TipoDocumentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.TipoDocumentoCountArgs<ExtArgs>,
            result: $Utils.Optional<TipoDocumentoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    paginas: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paginas?: boolean | UsuarioCountOutputTypeCountPaginasArgs
  }

  // Custom InputTypes

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountPaginasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaginaWhereInput
  }



  /**
   * Count Type PaginaCountOutputType
   */

  export type PaginaCountOutputType = {
    tipos: number
  }

  export type PaginaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tipos?: boolean | PaginaCountOutputTypeCountTiposArgs
  }

  // Custom InputTypes

  /**
   * PaginaCountOutputType without action
   */
  export type PaginaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaginaCountOutputType
     */
    select?: PaginaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PaginaCountOutputType without action
   */
  export type PaginaCountOutputTypeCountTiposArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TipoDocumentoWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    matricula: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    matricula: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    matricula: number | null
    nome: string | null
    senha: string | null
    admin: boolean | null
    isN: boolean | null
    token: string | null
    isAuth: boolean | null
  }

  export type UsuarioMaxAggregateOutputType = {
    matricula: number | null
    nome: string | null
    senha: string | null
    admin: boolean | null
    isN: boolean | null
    token: string | null
    isAuth: boolean | null
  }

  export type UsuarioCountAggregateOutputType = {
    matricula: number
    nome: number
    senha: number
    admin: number
    isN: number
    token: number
    isAuth: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    matricula?: true
  }

  export type UsuarioSumAggregateInputType = {
    matricula?: true
  }

  export type UsuarioMinAggregateInputType = {
    matricula?: true
    nome?: true
    senha?: true
    admin?: true
    isN?: true
    token?: true
    isAuth?: true
  }

  export type UsuarioMaxAggregateInputType = {
    matricula?: true
    nome?: true
    senha?: true
    admin?: true
    isN?: true
    token?: true
    isAuth?: true
  }

  export type UsuarioCountAggregateInputType = {
    matricula?: true
    nome?: true
    senha?: true
    admin?: true
    isN?: true
    token?: true
    isAuth?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    matricula: number
    nome: string
    senha: string
    admin: boolean
    isN: boolean
    token: string
    isAuth: boolean
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    matricula?: boolean
    nome?: boolean
    senha?: boolean
    admin?: boolean
    isN?: boolean
    token?: boolean
    isAuth?: boolean
    paginas?: boolean | Usuario$paginasArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    matricula?: boolean
    nome?: boolean
    senha?: boolean
    admin?: boolean
    isN?: boolean
    token?: boolean
    isAuth?: boolean
  }

  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paginas?: boolean | Usuario$paginasArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      paginas: Prisma.$PaginaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      matricula: number
      nome: string
      senha: string
      admin: boolean
      isN: boolean
      token: string
      isAuth: boolean
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }


  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsuarioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsuarioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `matricula`
     * const usuarioWithMatriculaOnly = await prisma.usuario.findMany({ select: { matricula: true } })
     * 
    **/
    findMany<T extends UsuarioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends UsuarioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Usuarios.
     *     @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuario = await prisma.usuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsuarioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends UsuarioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsuarioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsuarioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsuarioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends UsuarioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    paginas<T extends Usuario$paginasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$paginasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaginaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Usuario model
   */ 
  interface UsuarioFieldRefs {
    readonly matricula: FieldRef<"Usuario", 'Int'>
    readonly nome: FieldRef<"Usuario", 'String'>
    readonly senha: FieldRef<"Usuario", 'String'>
    readonly admin: FieldRef<"Usuario", 'Boolean'>
    readonly isN: FieldRef<"Usuario", 'Boolean'>
    readonly token: FieldRef<"Usuario", 'String'>
    readonly isAuth: FieldRef<"Usuario", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }


  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }


  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }


  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }


  /**
   * Usuario.paginas
   */
  export type Usuario$paginasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagina
     */
    select?: PaginaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaginaInclude<ExtArgs> | null
    where?: PaginaWhereInput
    orderBy?: PaginaOrderByWithRelationInput | PaginaOrderByWithRelationInput[]
    cursor?: PaginaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaginaScalarFieldEnum | PaginaScalarFieldEnum[]
  }


  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
  }



  /**
   * Model Setores
   */

  export type AggregateSetores = {
    _count: SetoresCountAggregateOutputType | null
    _avg: SetoresAvgAggregateOutputType | null
    _sum: SetoresSumAggregateOutputType | null
    _min: SetoresMinAggregateOutputType | null
    _max: SetoresMaxAggregateOutputType | null
  }

  export type SetoresAvgAggregateOutputType = {
    codigo: number | null
  }

  export type SetoresSumAggregateOutputType = {
    codigo: number | null
  }

  export type SetoresMinAggregateOutputType = {
    codigo: number | null
    nome: string | null
    informacoes: string | null
    unidades: string | null
    horario: string | null
    responsavel: string | null
    contato: string | null
  }

  export type SetoresMaxAggregateOutputType = {
    codigo: number | null
    nome: string | null
    informacoes: string | null
    unidades: string | null
    horario: string | null
    responsavel: string | null
    contato: string | null
  }

  export type SetoresCountAggregateOutputType = {
    codigo: number
    nome: number
    informacoes: number
    unidades: number
    horario: number
    responsavel: number
    contato: number
    _all: number
  }


  export type SetoresAvgAggregateInputType = {
    codigo?: true
  }

  export type SetoresSumAggregateInputType = {
    codigo?: true
  }

  export type SetoresMinAggregateInputType = {
    codigo?: true
    nome?: true
    informacoes?: true
    unidades?: true
    horario?: true
    responsavel?: true
    contato?: true
  }

  export type SetoresMaxAggregateInputType = {
    codigo?: true
    nome?: true
    informacoes?: true
    unidades?: true
    horario?: true
    responsavel?: true
    contato?: true
  }

  export type SetoresCountAggregateInputType = {
    codigo?: true
    nome?: true
    informacoes?: true
    unidades?: true
    horario?: true
    responsavel?: true
    contato?: true
    _all?: true
  }

  export type SetoresAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Setores to aggregate.
     */
    where?: SetoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Setores to fetch.
     */
    orderBy?: SetoresOrderByWithRelationInput | SetoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SetoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Setores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Setores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Setores
    **/
    _count?: true | SetoresCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SetoresAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SetoresSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SetoresMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SetoresMaxAggregateInputType
  }

  export type GetSetoresAggregateType<T extends SetoresAggregateArgs> = {
        [P in keyof T & keyof AggregateSetores]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSetores[P]>
      : GetScalarType<T[P], AggregateSetores[P]>
  }




  export type SetoresGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SetoresWhereInput
    orderBy?: SetoresOrderByWithAggregationInput | SetoresOrderByWithAggregationInput[]
    by: SetoresScalarFieldEnum[] | SetoresScalarFieldEnum
    having?: SetoresScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SetoresCountAggregateInputType | true
    _avg?: SetoresAvgAggregateInputType
    _sum?: SetoresSumAggregateInputType
    _min?: SetoresMinAggregateInputType
    _max?: SetoresMaxAggregateInputType
  }

  export type SetoresGroupByOutputType = {
    codigo: number
    nome: string
    informacoes: string
    unidades: string
    horario: string
    responsavel: string
    contato: string
    _count: SetoresCountAggregateOutputType | null
    _avg: SetoresAvgAggregateOutputType | null
    _sum: SetoresSumAggregateOutputType | null
    _min: SetoresMinAggregateOutputType | null
    _max: SetoresMaxAggregateOutputType | null
  }

  type GetSetoresGroupByPayload<T extends SetoresGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SetoresGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SetoresGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SetoresGroupByOutputType[P]>
            : GetScalarType<T[P], SetoresGroupByOutputType[P]>
        }
      >
    >


  export type SetoresSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    codigo?: boolean
    nome?: boolean
    informacoes?: boolean
    unidades?: boolean
    horario?: boolean
    responsavel?: boolean
    contato?: boolean
  }, ExtArgs["result"]["setores"]>

  export type SetoresSelectScalar = {
    codigo?: boolean
    nome?: boolean
    informacoes?: boolean
    unidades?: boolean
    horario?: boolean
    responsavel?: boolean
    contato?: boolean
  }


  export type $SetoresPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Setores"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      codigo: number
      nome: string
      informacoes: string
      unidades: string
      horario: string
      responsavel: string
      contato: string
    }, ExtArgs["result"]["setores"]>
    composites: {}
  }


  type SetoresGetPayload<S extends boolean | null | undefined | SetoresDefaultArgs> = $Result.GetResult<Prisma.$SetoresPayload, S>

  type SetoresCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SetoresFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SetoresCountAggregateInputType | true
    }

  export interface SetoresDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Setores'], meta: { name: 'Setores' } }
    /**
     * Find zero or one Setores that matches the filter.
     * @param {SetoresFindUniqueArgs} args - Arguments to find a Setores
     * @example
     * // Get one Setores
     * const setores = await prisma.setores.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SetoresFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SetoresFindUniqueArgs<ExtArgs>>
    ): Prisma__SetoresClient<$Result.GetResult<Prisma.$SetoresPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Setores that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SetoresFindUniqueOrThrowArgs} args - Arguments to find a Setores
     * @example
     * // Get one Setores
     * const setores = await prisma.setores.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SetoresFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SetoresFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SetoresClient<$Result.GetResult<Prisma.$SetoresPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Setores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetoresFindFirstArgs} args - Arguments to find a Setores
     * @example
     * // Get one Setores
     * const setores = await prisma.setores.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SetoresFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SetoresFindFirstArgs<ExtArgs>>
    ): Prisma__SetoresClient<$Result.GetResult<Prisma.$SetoresPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Setores that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetoresFindFirstOrThrowArgs} args - Arguments to find a Setores
     * @example
     * // Get one Setores
     * const setores = await prisma.setores.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SetoresFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SetoresFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SetoresClient<$Result.GetResult<Prisma.$SetoresPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Setores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetoresFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Setores
     * const setores = await prisma.setores.findMany()
     * 
     * // Get first 10 Setores
     * const setores = await prisma.setores.findMany({ take: 10 })
     * 
     * // Only select the `codigo`
     * const setoresWithCodigoOnly = await prisma.setores.findMany({ select: { codigo: true } })
     * 
    **/
    findMany<T extends SetoresFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SetoresFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SetoresPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Setores.
     * @param {SetoresCreateArgs} args - Arguments to create a Setores.
     * @example
     * // Create one Setores
     * const Setores = await prisma.setores.create({
     *   data: {
     *     // ... data to create a Setores
     *   }
     * })
     * 
    **/
    create<T extends SetoresCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SetoresCreateArgs<ExtArgs>>
    ): Prisma__SetoresClient<$Result.GetResult<Prisma.$SetoresPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Setores.
     *     @param {SetoresCreateManyArgs} args - Arguments to create many Setores.
     *     @example
     *     // Create many Setores
     *     const setores = await prisma.setores.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SetoresCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SetoresCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Setores.
     * @param {SetoresDeleteArgs} args - Arguments to delete one Setores.
     * @example
     * // Delete one Setores
     * const Setores = await prisma.setores.delete({
     *   where: {
     *     // ... filter to delete one Setores
     *   }
     * })
     * 
    **/
    delete<T extends SetoresDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SetoresDeleteArgs<ExtArgs>>
    ): Prisma__SetoresClient<$Result.GetResult<Prisma.$SetoresPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Setores.
     * @param {SetoresUpdateArgs} args - Arguments to update one Setores.
     * @example
     * // Update one Setores
     * const setores = await prisma.setores.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SetoresUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SetoresUpdateArgs<ExtArgs>>
    ): Prisma__SetoresClient<$Result.GetResult<Prisma.$SetoresPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Setores.
     * @param {SetoresDeleteManyArgs} args - Arguments to filter Setores to delete.
     * @example
     * // Delete a few Setores
     * const { count } = await prisma.setores.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SetoresDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SetoresDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Setores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetoresUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Setores
     * const setores = await prisma.setores.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SetoresUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SetoresUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Setores.
     * @param {SetoresUpsertArgs} args - Arguments to update or create a Setores.
     * @example
     * // Update or create a Setores
     * const setores = await prisma.setores.upsert({
     *   create: {
     *     // ... data to create a Setores
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Setores we want to update
     *   }
     * })
    **/
    upsert<T extends SetoresUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SetoresUpsertArgs<ExtArgs>>
    ): Prisma__SetoresClient<$Result.GetResult<Prisma.$SetoresPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Setores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetoresCountArgs} args - Arguments to filter Setores to count.
     * @example
     * // Count the number of Setores
     * const count = await prisma.setores.count({
     *   where: {
     *     // ... the filter for the Setores we want to count
     *   }
     * })
    **/
    count<T extends SetoresCountArgs>(
      args?: Subset<T, SetoresCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SetoresCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Setores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetoresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SetoresAggregateArgs>(args: Subset<T, SetoresAggregateArgs>): Prisma.PrismaPromise<GetSetoresAggregateType<T>>

    /**
     * Group by Setores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetoresGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SetoresGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SetoresGroupByArgs['orderBy'] }
        : { orderBy?: SetoresGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SetoresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSetoresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Setores model
   */
  readonly fields: SetoresFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Setores.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SetoresClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Setores model
   */ 
  interface SetoresFieldRefs {
    readonly codigo: FieldRef<"Setores", 'Int'>
    readonly nome: FieldRef<"Setores", 'String'>
    readonly informacoes: FieldRef<"Setores", 'String'>
    readonly unidades: FieldRef<"Setores", 'String'>
    readonly horario: FieldRef<"Setores", 'String'>
    readonly responsavel: FieldRef<"Setores", 'String'>
    readonly contato: FieldRef<"Setores", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Setores findUnique
   */
  export type SetoresFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setores
     */
    select?: SetoresSelect<ExtArgs> | null
    /**
     * Filter, which Setores to fetch.
     */
    where: SetoresWhereUniqueInput
  }


  /**
   * Setores findUniqueOrThrow
   */
  export type SetoresFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setores
     */
    select?: SetoresSelect<ExtArgs> | null
    /**
     * Filter, which Setores to fetch.
     */
    where: SetoresWhereUniqueInput
  }


  /**
   * Setores findFirst
   */
  export type SetoresFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setores
     */
    select?: SetoresSelect<ExtArgs> | null
    /**
     * Filter, which Setores to fetch.
     */
    where?: SetoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Setores to fetch.
     */
    orderBy?: SetoresOrderByWithRelationInput | SetoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Setores.
     */
    cursor?: SetoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Setores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Setores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Setores.
     */
    distinct?: SetoresScalarFieldEnum | SetoresScalarFieldEnum[]
  }


  /**
   * Setores findFirstOrThrow
   */
  export type SetoresFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setores
     */
    select?: SetoresSelect<ExtArgs> | null
    /**
     * Filter, which Setores to fetch.
     */
    where?: SetoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Setores to fetch.
     */
    orderBy?: SetoresOrderByWithRelationInput | SetoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Setores.
     */
    cursor?: SetoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Setores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Setores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Setores.
     */
    distinct?: SetoresScalarFieldEnum | SetoresScalarFieldEnum[]
  }


  /**
   * Setores findMany
   */
  export type SetoresFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setores
     */
    select?: SetoresSelect<ExtArgs> | null
    /**
     * Filter, which Setores to fetch.
     */
    where?: SetoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Setores to fetch.
     */
    orderBy?: SetoresOrderByWithRelationInput | SetoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Setores.
     */
    cursor?: SetoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Setores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Setores.
     */
    skip?: number
    distinct?: SetoresScalarFieldEnum | SetoresScalarFieldEnum[]
  }


  /**
   * Setores create
   */
  export type SetoresCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setores
     */
    select?: SetoresSelect<ExtArgs> | null
    /**
     * The data needed to create a Setores.
     */
    data: XOR<SetoresCreateInput, SetoresUncheckedCreateInput>
  }


  /**
   * Setores createMany
   */
  export type SetoresCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Setores.
     */
    data: SetoresCreateManyInput | SetoresCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Setores update
   */
  export type SetoresUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setores
     */
    select?: SetoresSelect<ExtArgs> | null
    /**
     * The data needed to update a Setores.
     */
    data: XOR<SetoresUpdateInput, SetoresUncheckedUpdateInput>
    /**
     * Choose, which Setores to update.
     */
    where: SetoresWhereUniqueInput
  }


  /**
   * Setores updateMany
   */
  export type SetoresUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Setores.
     */
    data: XOR<SetoresUpdateManyMutationInput, SetoresUncheckedUpdateManyInput>
    /**
     * Filter which Setores to update
     */
    where?: SetoresWhereInput
  }


  /**
   * Setores upsert
   */
  export type SetoresUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setores
     */
    select?: SetoresSelect<ExtArgs> | null
    /**
     * The filter to search for the Setores to update in case it exists.
     */
    where: SetoresWhereUniqueInput
    /**
     * In case the Setores found by the `where` argument doesn't exist, create a new Setores with this data.
     */
    create: XOR<SetoresCreateInput, SetoresUncheckedCreateInput>
    /**
     * In case the Setores was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SetoresUpdateInput, SetoresUncheckedUpdateInput>
  }


  /**
   * Setores delete
   */
  export type SetoresDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setores
     */
    select?: SetoresSelect<ExtArgs> | null
    /**
     * Filter which Setores to delete.
     */
    where: SetoresWhereUniqueInput
  }


  /**
   * Setores deleteMany
   */
  export type SetoresDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Setores to delete
     */
    where?: SetoresWhereInput
  }


  /**
   * Setores without action
   */
  export type SetoresDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setores
     */
    select?: SetoresSelect<ExtArgs> | null
  }



  /**
   * Model Curso
   */

  export type AggregateCurso = {
    _count: CursoCountAggregateOutputType | null
    _avg: CursoAvgAggregateOutputType | null
    _sum: CursoSumAggregateOutputType | null
    _min: CursoMinAggregateOutputType | null
    _max: CursoMaxAggregateOutputType | null
  }

  export type CursoAvgAggregateOutputType = {
    matricula: number | null
  }

  export type CursoSumAggregateOutputType = {
    matricula: number | null
  }

  export type CursoMinAggregateOutputType = {
    id: string | null
    matricula: number | null
    nome: string | null
    unidade: string | null
    turno: string | null
    informacao: string | null
    imagem: string | null
  }

  export type CursoMaxAggregateOutputType = {
    id: string | null
    matricula: number | null
    nome: string | null
    unidade: string | null
    turno: string | null
    informacao: string | null
    imagem: string | null
  }

  export type CursoCountAggregateOutputType = {
    id: number
    matricula: number
    nome: number
    unidade: number
    turno: number
    informacao: number
    imagem: number
    _all: number
  }


  export type CursoAvgAggregateInputType = {
    matricula?: true
  }

  export type CursoSumAggregateInputType = {
    matricula?: true
  }

  export type CursoMinAggregateInputType = {
    id?: true
    matricula?: true
    nome?: true
    unidade?: true
    turno?: true
    informacao?: true
    imagem?: true
  }

  export type CursoMaxAggregateInputType = {
    id?: true
    matricula?: true
    nome?: true
    unidade?: true
    turno?: true
    informacao?: true
    imagem?: true
  }

  export type CursoCountAggregateInputType = {
    id?: true
    matricula?: true
    nome?: true
    unidade?: true
    turno?: true
    informacao?: true
    imagem?: true
    _all?: true
  }

  export type CursoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Curso to aggregate.
     */
    where?: CursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursos to fetch.
     */
    orderBy?: CursoOrderByWithRelationInput | CursoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cursos
    **/
    _count?: true | CursoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CursoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CursoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CursoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CursoMaxAggregateInputType
  }

  export type GetCursoAggregateType<T extends CursoAggregateArgs> = {
        [P in keyof T & keyof AggregateCurso]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCurso[P]>
      : GetScalarType<T[P], AggregateCurso[P]>
  }




  export type CursoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CursoWhereInput
    orderBy?: CursoOrderByWithAggregationInput | CursoOrderByWithAggregationInput[]
    by: CursoScalarFieldEnum[] | CursoScalarFieldEnum
    having?: CursoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CursoCountAggregateInputType | true
    _avg?: CursoAvgAggregateInputType
    _sum?: CursoSumAggregateInputType
    _min?: CursoMinAggregateInputType
    _max?: CursoMaxAggregateInputType
  }

  export type CursoGroupByOutputType = {
    id: string
    matricula: number
    nome: string
    unidade: string
    turno: string
    informacao: string
    imagem: string
    _count: CursoCountAggregateOutputType | null
    _avg: CursoAvgAggregateOutputType | null
    _sum: CursoSumAggregateOutputType | null
    _min: CursoMinAggregateOutputType | null
    _max: CursoMaxAggregateOutputType | null
  }

  type GetCursoGroupByPayload<T extends CursoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CursoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CursoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CursoGroupByOutputType[P]>
            : GetScalarType<T[P], CursoGroupByOutputType[P]>
        }
      >
    >


  export type CursoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matricula?: boolean
    nome?: boolean
    unidade?: boolean
    turno?: boolean
    informacao?: boolean
    imagem?: boolean
  }, ExtArgs["result"]["curso"]>

  export type CursoSelectScalar = {
    id?: boolean
    matricula?: boolean
    nome?: boolean
    unidade?: boolean
    turno?: boolean
    informacao?: boolean
    imagem?: boolean
  }


  export type $CursoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Curso"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      matricula: number
      nome: string
      unidade: string
      turno: string
      informacao: string
      imagem: string
    }, ExtArgs["result"]["curso"]>
    composites: {}
  }


  type CursoGetPayload<S extends boolean | null | undefined | CursoDefaultArgs> = $Result.GetResult<Prisma.$CursoPayload, S>

  type CursoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CursoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CursoCountAggregateInputType | true
    }

  export interface CursoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Curso'], meta: { name: 'Curso' } }
    /**
     * Find zero or one Curso that matches the filter.
     * @param {CursoFindUniqueArgs} args - Arguments to find a Curso
     * @example
     * // Get one Curso
     * const curso = await prisma.curso.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CursoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CursoFindUniqueArgs<ExtArgs>>
    ): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Curso that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CursoFindUniqueOrThrowArgs} args - Arguments to find a Curso
     * @example
     * // Get one Curso
     * const curso = await prisma.curso.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CursoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CursoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Curso that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoFindFirstArgs} args - Arguments to find a Curso
     * @example
     * // Get one Curso
     * const curso = await prisma.curso.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CursoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CursoFindFirstArgs<ExtArgs>>
    ): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Curso that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoFindFirstOrThrowArgs} args - Arguments to find a Curso
     * @example
     * // Get one Curso
     * const curso = await prisma.curso.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CursoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CursoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cursos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cursos
     * const cursos = await prisma.curso.findMany()
     * 
     * // Get first 10 Cursos
     * const cursos = await prisma.curso.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cursoWithIdOnly = await prisma.curso.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CursoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CursoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Curso.
     * @param {CursoCreateArgs} args - Arguments to create a Curso.
     * @example
     * // Create one Curso
     * const Curso = await prisma.curso.create({
     *   data: {
     *     // ... data to create a Curso
     *   }
     * })
     * 
    **/
    create<T extends CursoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CursoCreateArgs<ExtArgs>>
    ): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Cursos.
     *     @param {CursoCreateManyArgs} args - Arguments to create many Cursos.
     *     @example
     *     // Create many Cursos
     *     const curso = await prisma.curso.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CursoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CursoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Curso.
     * @param {CursoDeleteArgs} args - Arguments to delete one Curso.
     * @example
     * // Delete one Curso
     * const Curso = await prisma.curso.delete({
     *   where: {
     *     // ... filter to delete one Curso
     *   }
     * })
     * 
    **/
    delete<T extends CursoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CursoDeleteArgs<ExtArgs>>
    ): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Curso.
     * @param {CursoUpdateArgs} args - Arguments to update one Curso.
     * @example
     * // Update one Curso
     * const curso = await prisma.curso.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CursoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CursoUpdateArgs<ExtArgs>>
    ): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cursos.
     * @param {CursoDeleteManyArgs} args - Arguments to filter Cursos to delete.
     * @example
     * // Delete a few Cursos
     * const { count } = await prisma.curso.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CursoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CursoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cursos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cursos
     * const curso = await prisma.curso.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CursoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CursoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Curso.
     * @param {CursoUpsertArgs} args - Arguments to update or create a Curso.
     * @example
     * // Update or create a Curso
     * const curso = await prisma.curso.upsert({
     *   create: {
     *     // ... data to create a Curso
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Curso we want to update
     *   }
     * })
    **/
    upsert<T extends CursoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CursoUpsertArgs<ExtArgs>>
    ): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Cursos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoCountArgs} args - Arguments to filter Cursos to count.
     * @example
     * // Count the number of Cursos
     * const count = await prisma.curso.count({
     *   where: {
     *     // ... the filter for the Cursos we want to count
     *   }
     * })
    **/
    count<T extends CursoCountArgs>(
      args?: Subset<T, CursoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CursoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Curso.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CursoAggregateArgs>(args: Subset<T, CursoAggregateArgs>): Prisma.PrismaPromise<GetCursoAggregateType<T>>

    /**
     * Group by Curso.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CursoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CursoGroupByArgs['orderBy'] }
        : { orderBy?: CursoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CursoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCursoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Curso model
   */
  readonly fields: CursoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Curso.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CursoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Curso model
   */ 
  interface CursoFieldRefs {
    readonly id: FieldRef<"Curso", 'String'>
    readonly matricula: FieldRef<"Curso", 'Int'>
    readonly nome: FieldRef<"Curso", 'String'>
    readonly unidade: FieldRef<"Curso", 'String'>
    readonly turno: FieldRef<"Curso", 'String'>
    readonly informacao: FieldRef<"Curso", 'String'>
    readonly imagem: FieldRef<"Curso", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Curso findUnique
   */
  export type CursoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Filter, which Curso to fetch.
     */
    where: CursoWhereUniqueInput
  }


  /**
   * Curso findUniqueOrThrow
   */
  export type CursoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Filter, which Curso to fetch.
     */
    where: CursoWhereUniqueInput
  }


  /**
   * Curso findFirst
   */
  export type CursoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Filter, which Curso to fetch.
     */
    where?: CursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursos to fetch.
     */
    orderBy?: CursoOrderByWithRelationInput | CursoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cursos.
     */
    cursor?: CursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cursos.
     */
    distinct?: CursoScalarFieldEnum | CursoScalarFieldEnum[]
  }


  /**
   * Curso findFirstOrThrow
   */
  export type CursoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Filter, which Curso to fetch.
     */
    where?: CursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursos to fetch.
     */
    orderBy?: CursoOrderByWithRelationInput | CursoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cursos.
     */
    cursor?: CursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cursos.
     */
    distinct?: CursoScalarFieldEnum | CursoScalarFieldEnum[]
  }


  /**
   * Curso findMany
   */
  export type CursoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Filter, which Cursos to fetch.
     */
    where?: CursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursos to fetch.
     */
    orderBy?: CursoOrderByWithRelationInput | CursoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cursos.
     */
    cursor?: CursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursos.
     */
    skip?: number
    distinct?: CursoScalarFieldEnum | CursoScalarFieldEnum[]
  }


  /**
   * Curso create
   */
  export type CursoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * The data needed to create a Curso.
     */
    data: XOR<CursoCreateInput, CursoUncheckedCreateInput>
  }


  /**
   * Curso createMany
   */
  export type CursoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cursos.
     */
    data: CursoCreateManyInput | CursoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Curso update
   */
  export type CursoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * The data needed to update a Curso.
     */
    data: XOR<CursoUpdateInput, CursoUncheckedUpdateInput>
    /**
     * Choose, which Curso to update.
     */
    where: CursoWhereUniqueInput
  }


  /**
   * Curso updateMany
   */
  export type CursoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cursos.
     */
    data: XOR<CursoUpdateManyMutationInput, CursoUncheckedUpdateManyInput>
    /**
     * Filter which Cursos to update
     */
    where?: CursoWhereInput
  }


  /**
   * Curso upsert
   */
  export type CursoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * The filter to search for the Curso to update in case it exists.
     */
    where: CursoWhereUniqueInput
    /**
     * In case the Curso found by the `where` argument doesn't exist, create a new Curso with this data.
     */
    create: XOR<CursoCreateInput, CursoUncheckedCreateInput>
    /**
     * In case the Curso was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CursoUpdateInput, CursoUncheckedUpdateInput>
  }


  /**
   * Curso delete
   */
  export type CursoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Filter which Curso to delete.
     */
    where: CursoWhereUniqueInput
  }


  /**
   * Curso deleteMany
   */
  export type CursoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cursos to delete
     */
    where?: CursoWhereInput
  }


  /**
   * Curso without action
   */
  export type CursoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
  }



  /**
   * Model CursoValor
   */

  export type AggregateCursoValor = {
    _count: CursoValorCountAggregateOutputType | null
    _avg: CursoValorAvgAggregateOutputType | null
    _sum: CursoValorSumAggregateOutputType | null
    _min: CursoValorMinAggregateOutputType | null
    _max: CursoValorMaxAggregateOutputType | null
  }

  export type CursoValorAvgAggregateOutputType = {
    valor_E: number | null
    valor_M: number | null
  }

  export type CursoValorSumAggregateOutputType = {
    valor_E: number | null
    valor_M: number | null
  }

  export type CursoValorMinAggregateOutputType = {
    id: string | null
    valor_E: number | null
    valor_M: number | null
    nome: string | null
    unidade: string | null
    turno: string | null
  }

  export type CursoValorMaxAggregateOutputType = {
    id: string | null
    valor_E: number | null
    valor_M: number | null
    nome: string | null
    unidade: string | null
    turno: string | null
  }

  export type CursoValorCountAggregateOutputType = {
    id: number
    valor_E: number
    valor_M: number
    nome: number
    unidade: number
    turno: number
    _all: number
  }


  export type CursoValorAvgAggregateInputType = {
    valor_E?: true
    valor_M?: true
  }

  export type CursoValorSumAggregateInputType = {
    valor_E?: true
    valor_M?: true
  }

  export type CursoValorMinAggregateInputType = {
    id?: true
    valor_E?: true
    valor_M?: true
    nome?: true
    unidade?: true
    turno?: true
  }

  export type CursoValorMaxAggregateInputType = {
    id?: true
    valor_E?: true
    valor_M?: true
    nome?: true
    unidade?: true
    turno?: true
  }

  export type CursoValorCountAggregateInputType = {
    id?: true
    valor_E?: true
    valor_M?: true
    nome?: true
    unidade?: true
    turno?: true
    _all?: true
  }

  export type CursoValorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CursoValor to aggregate.
     */
    where?: CursoValorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CursoValors to fetch.
     */
    orderBy?: CursoValorOrderByWithRelationInput | CursoValorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CursoValorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CursoValors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CursoValors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CursoValors
    **/
    _count?: true | CursoValorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CursoValorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CursoValorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CursoValorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CursoValorMaxAggregateInputType
  }

  export type GetCursoValorAggregateType<T extends CursoValorAggregateArgs> = {
        [P in keyof T & keyof AggregateCursoValor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCursoValor[P]>
      : GetScalarType<T[P], AggregateCursoValor[P]>
  }




  export type CursoValorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CursoValorWhereInput
    orderBy?: CursoValorOrderByWithAggregationInput | CursoValorOrderByWithAggregationInput[]
    by: CursoValorScalarFieldEnum[] | CursoValorScalarFieldEnum
    having?: CursoValorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CursoValorCountAggregateInputType | true
    _avg?: CursoValorAvgAggregateInputType
    _sum?: CursoValorSumAggregateInputType
    _min?: CursoValorMinAggregateInputType
    _max?: CursoValorMaxAggregateInputType
  }

  export type CursoValorGroupByOutputType = {
    id: string
    valor_E: number
    valor_M: number
    nome: string
    unidade: string
    turno: string
    _count: CursoValorCountAggregateOutputType | null
    _avg: CursoValorAvgAggregateOutputType | null
    _sum: CursoValorSumAggregateOutputType | null
    _min: CursoValorMinAggregateOutputType | null
    _max: CursoValorMaxAggregateOutputType | null
  }

  type GetCursoValorGroupByPayload<T extends CursoValorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CursoValorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CursoValorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CursoValorGroupByOutputType[P]>
            : GetScalarType<T[P], CursoValorGroupByOutputType[P]>
        }
      >
    >


  export type CursoValorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor_E?: boolean
    valor_M?: boolean
    nome?: boolean
    unidade?: boolean
    turno?: boolean
  }, ExtArgs["result"]["cursoValor"]>

  export type CursoValorSelectScalar = {
    id?: boolean
    valor_E?: boolean
    valor_M?: boolean
    nome?: boolean
    unidade?: boolean
    turno?: boolean
  }


  export type $CursoValorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CursoValor"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      valor_E: number
      valor_M: number
      nome: string
      unidade: string
      turno: string
    }, ExtArgs["result"]["cursoValor"]>
    composites: {}
  }


  type CursoValorGetPayload<S extends boolean | null | undefined | CursoValorDefaultArgs> = $Result.GetResult<Prisma.$CursoValorPayload, S>

  type CursoValorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CursoValorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CursoValorCountAggregateInputType | true
    }

  export interface CursoValorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CursoValor'], meta: { name: 'CursoValor' } }
    /**
     * Find zero or one CursoValor that matches the filter.
     * @param {CursoValorFindUniqueArgs} args - Arguments to find a CursoValor
     * @example
     * // Get one CursoValor
     * const cursoValor = await prisma.cursoValor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CursoValorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CursoValorFindUniqueArgs<ExtArgs>>
    ): Prisma__CursoValorClient<$Result.GetResult<Prisma.$CursoValorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CursoValor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CursoValorFindUniqueOrThrowArgs} args - Arguments to find a CursoValor
     * @example
     * // Get one CursoValor
     * const cursoValor = await prisma.cursoValor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CursoValorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CursoValorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CursoValorClient<$Result.GetResult<Prisma.$CursoValorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CursoValor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoValorFindFirstArgs} args - Arguments to find a CursoValor
     * @example
     * // Get one CursoValor
     * const cursoValor = await prisma.cursoValor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CursoValorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CursoValorFindFirstArgs<ExtArgs>>
    ): Prisma__CursoValorClient<$Result.GetResult<Prisma.$CursoValorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CursoValor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoValorFindFirstOrThrowArgs} args - Arguments to find a CursoValor
     * @example
     * // Get one CursoValor
     * const cursoValor = await prisma.cursoValor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CursoValorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CursoValorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CursoValorClient<$Result.GetResult<Prisma.$CursoValorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CursoValors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoValorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CursoValors
     * const cursoValors = await prisma.cursoValor.findMany()
     * 
     * // Get first 10 CursoValors
     * const cursoValors = await prisma.cursoValor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cursoValorWithIdOnly = await prisma.cursoValor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CursoValorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CursoValorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CursoValorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CursoValor.
     * @param {CursoValorCreateArgs} args - Arguments to create a CursoValor.
     * @example
     * // Create one CursoValor
     * const CursoValor = await prisma.cursoValor.create({
     *   data: {
     *     // ... data to create a CursoValor
     *   }
     * })
     * 
    **/
    create<T extends CursoValorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CursoValorCreateArgs<ExtArgs>>
    ): Prisma__CursoValorClient<$Result.GetResult<Prisma.$CursoValorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CursoValors.
     *     @param {CursoValorCreateManyArgs} args - Arguments to create many CursoValors.
     *     @example
     *     // Create many CursoValors
     *     const cursoValor = await prisma.cursoValor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CursoValorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CursoValorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CursoValor.
     * @param {CursoValorDeleteArgs} args - Arguments to delete one CursoValor.
     * @example
     * // Delete one CursoValor
     * const CursoValor = await prisma.cursoValor.delete({
     *   where: {
     *     // ... filter to delete one CursoValor
     *   }
     * })
     * 
    **/
    delete<T extends CursoValorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CursoValorDeleteArgs<ExtArgs>>
    ): Prisma__CursoValorClient<$Result.GetResult<Prisma.$CursoValorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CursoValor.
     * @param {CursoValorUpdateArgs} args - Arguments to update one CursoValor.
     * @example
     * // Update one CursoValor
     * const cursoValor = await prisma.cursoValor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CursoValorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CursoValorUpdateArgs<ExtArgs>>
    ): Prisma__CursoValorClient<$Result.GetResult<Prisma.$CursoValorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CursoValors.
     * @param {CursoValorDeleteManyArgs} args - Arguments to filter CursoValors to delete.
     * @example
     * // Delete a few CursoValors
     * const { count } = await prisma.cursoValor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CursoValorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CursoValorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CursoValors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoValorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CursoValors
     * const cursoValor = await prisma.cursoValor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CursoValorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CursoValorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CursoValor.
     * @param {CursoValorUpsertArgs} args - Arguments to update or create a CursoValor.
     * @example
     * // Update or create a CursoValor
     * const cursoValor = await prisma.cursoValor.upsert({
     *   create: {
     *     // ... data to create a CursoValor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CursoValor we want to update
     *   }
     * })
    **/
    upsert<T extends CursoValorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CursoValorUpsertArgs<ExtArgs>>
    ): Prisma__CursoValorClient<$Result.GetResult<Prisma.$CursoValorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CursoValors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoValorCountArgs} args - Arguments to filter CursoValors to count.
     * @example
     * // Count the number of CursoValors
     * const count = await prisma.cursoValor.count({
     *   where: {
     *     // ... the filter for the CursoValors we want to count
     *   }
     * })
    **/
    count<T extends CursoValorCountArgs>(
      args?: Subset<T, CursoValorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CursoValorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CursoValor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoValorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CursoValorAggregateArgs>(args: Subset<T, CursoValorAggregateArgs>): Prisma.PrismaPromise<GetCursoValorAggregateType<T>>

    /**
     * Group by CursoValor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoValorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CursoValorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CursoValorGroupByArgs['orderBy'] }
        : { orderBy?: CursoValorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CursoValorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCursoValorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CursoValor model
   */
  readonly fields: CursoValorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CursoValor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CursoValorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CursoValor model
   */ 
  interface CursoValorFieldRefs {
    readonly id: FieldRef<"CursoValor", 'String'>
    readonly valor_E: FieldRef<"CursoValor", 'Float'>
    readonly valor_M: FieldRef<"CursoValor", 'Float'>
    readonly nome: FieldRef<"CursoValor", 'String'>
    readonly unidade: FieldRef<"CursoValor", 'String'>
    readonly turno: FieldRef<"CursoValor", 'String'>
  }
    

  // Custom InputTypes

  /**
   * CursoValor findUnique
   */
  export type CursoValorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CursoValor
     */
    select?: CursoValorSelect<ExtArgs> | null
    /**
     * Filter, which CursoValor to fetch.
     */
    where: CursoValorWhereUniqueInput
  }


  /**
   * CursoValor findUniqueOrThrow
   */
  export type CursoValorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CursoValor
     */
    select?: CursoValorSelect<ExtArgs> | null
    /**
     * Filter, which CursoValor to fetch.
     */
    where: CursoValorWhereUniqueInput
  }


  /**
   * CursoValor findFirst
   */
  export type CursoValorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CursoValor
     */
    select?: CursoValorSelect<ExtArgs> | null
    /**
     * Filter, which CursoValor to fetch.
     */
    where?: CursoValorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CursoValors to fetch.
     */
    orderBy?: CursoValorOrderByWithRelationInput | CursoValorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CursoValors.
     */
    cursor?: CursoValorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CursoValors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CursoValors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CursoValors.
     */
    distinct?: CursoValorScalarFieldEnum | CursoValorScalarFieldEnum[]
  }


  /**
   * CursoValor findFirstOrThrow
   */
  export type CursoValorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CursoValor
     */
    select?: CursoValorSelect<ExtArgs> | null
    /**
     * Filter, which CursoValor to fetch.
     */
    where?: CursoValorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CursoValors to fetch.
     */
    orderBy?: CursoValorOrderByWithRelationInput | CursoValorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CursoValors.
     */
    cursor?: CursoValorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CursoValors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CursoValors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CursoValors.
     */
    distinct?: CursoValorScalarFieldEnum | CursoValorScalarFieldEnum[]
  }


  /**
   * CursoValor findMany
   */
  export type CursoValorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CursoValor
     */
    select?: CursoValorSelect<ExtArgs> | null
    /**
     * Filter, which CursoValors to fetch.
     */
    where?: CursoValorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CursoValors to fetch.
     */
    orderBy?: CursoValorOrderByWithRelationInput | CursoValorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CursoValors.
     */
    cursor?: CursoValorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CursoValors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CursoValors.
     */
    skip?: number
    distinct?: CursoValorScalarFieldEnum | CursoValorScalarFieldEnum[]
  }


  /**
   * CursoValor create
   */
  export type CursoValorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CursoValor
     */
    select?: CursoValorSelect<ExtArgs> | null
    /**
     * The data needed to create a CursoValor.
     */
    data: XOR<CursoValorCreateInput, CursoValorUncheckedCreateInput>
  }


  /**
   * CursoValor createMany
   */
  export type CursoValorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CursoValors.
     */
    data: CursoValorCreateManyInput | CursoValorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CursoValor update
   */
  export type CursoValorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CursoValor
     */
    select?: CursoValorSelect<ExtArgs> | null
    /**
     * The data needed to update a CursoValor.
     */
    data: XOR<CursoValorUpdateInput, CursoValorUncheckedUpdateInput>
    /**
     * Choose, which CursoValor to update.
     */
    where: CursoValorWhereUniqueInput
  }


  /**
   * CursoValor updateMany
   */
  export type CursoValorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CursoValors.
     */
    data: XOR<CursoValorUpdateManyMutationInput, CursoValorUncheckedUpdateManyInput>
    /**
     * Filter which CursoValors to update
     */
    where?: CursoValorWhereInput
  }


  /**
   * CursoValor upsert
   */
  export type CursoValorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CursoValor
     */
    select?: CursoValorSelect<ExtArgs> | null
    /**
     * The filter to search for the CursoValor to update in case it exists.
     */
    where: CursoValorWhereUniqueInput
    /**
     * In case the CursoValor found by the `where` argument doesn't exist, create a new CursoValor with this data.
     */
    create: XOR<CursoValorCreateInput, CursoValorUncheckedCreateInput>
    /**
     * In case the CursoValor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CursoValorUpdateInput, CursoValorUncheckedUpdateInput>
  }


  /**
   * CursoValor delete
   */
  export type CursoValorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CursoValor
     */
    select?: CursoValorSelect<ExtArgs> | null
    /**
     * Filter which CursoValor to delete.
     */
    where: CursoValorWhereUniqueInput
  }


  /**
   * CursoValor deleteMany
   */
  export type CursoValorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CursoValors to delete
     */
    where?: CursoValorWhereInput
  }


  /**
   * CursoValor without action
   */
  export type CursoValorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CursoValor
     */
    select?: CursoValorSelect<ExtArgs> | null
  }



  /**
   * Model Professores
   */

  export type AggregateProfessores = {
    _count: ProfessoresCountAggregateOutputType | null
    _min: ProfessoresMinAggregateOutputType | null
    _max: ProfessoresMaxAggregateOutputType | null
  }

  export type ProfessoresMinAggregateOutputType = {
    nome: string | null
    materia: string | null
    tit: string | null
    foto: string | null
  }

  export type ProfessoresMaxAggregateOutputType = {
    nome: string | null
    materia: string | null
    tit: string | null
    foto: string | null
  }

  export type ProfessoresCountAggregateOutputType = {
    nome: number
    materia: number
    tit: number
    foto: number
    _all: number
  }


  export type ProfessoresMinAggregateInputType = {
    nome?: true
    materia?: true
    tit?: true
    foto?: true
  }

  export type ProfessoresMaxAggregateInputType = {
    nome?: true
    materia?: true
    tit?: true
    foto?: true
  }

  export type ProfessoresCountAggregateInputType = {
    nome?: true
    materia?: true
    tit?: true
    foto?: true
    _all?: true
  }

  export type ProfessoresAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professores to aggregate.
     */
    where?: ProfessoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professores to fetch.
     */
    orderBy?: ProfessoresOrderByWithRelationInput | ProfessoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Professores
    **/
    _count?: true | ProfessoresCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessoresMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessoresMaxAggregateInputType
  }

  export type GetProfessoresAggregateType<T extends ProfessoresAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessores]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessores[P]>
      : GetScalarType<T[P], AggregateProfessores[P]>
  }




  export type ProfessoresGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessoresWhereInput
    orderBy?: ProfessoresOrderByWithAggregationInput | ProfessoresOrderByWithAggregationInput[]
    by: ProfessoresScalarFieldEnum[] | ProfessoresScalarFieldEnum
    having?: ProfessoresScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessoresCountAggregateInputType | true
    _min?: ProfessoresMinAggregateInputType
    _max?: ProfessoresMaxAggregateInputType
  }

  export type ProfessoresGroupByOutputType = {
    nome: string
    materia: string
    tit: string
    foto: string
    _count: ProfessoresCountAggregateOutputType | null
    _min: ProfessoresMinAggregateOutputType | null
    _max: ProfessoresMaxAggregateOutputType | null
  }

  type GetProfessoresGroupByPayload<T extends ProfessoresGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessoresGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessoresGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessoresGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessoresGroupByOutputType[P]>
        }
      >
    >


  export type ProfessoresSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    nome?: boolean
    materia?: boolean
    tit?: boolean
    foto?: boolean
  }, ExtArgs["result"]["professores"]>

  export type ProfessoresSelectScalar = {
    nome?: boolean
    materia?: boolean
    tit?: boolean
    foto?: boolean
  }


  export type $ProfessoresPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Professores"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      nome: string
      materia: string
      tit: string
      foto: string
    }, ExtArgs["result"]["professores"]>
    composites: {}
  }


  type ProfessoresGetPayload<S extends boolean | null | undefined | ProfessoresDefaultArgs> = $Result.GetResult<Prisma.$ProfessoresPayload, S>

  type ProfessoresCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfessoresFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProfessoresCountAggregateInputType | true
    }

  export interface ProfessoresDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Professores'], meta: { name: 'Professores' } }
    /**
     * Find zero or one Professores that matches the filter.
     * @param {ProfessoresFindUniqueArgs} args - Arguments to find a Professores
     * @example
     * // Get one Professores
     * const professores = await prisma.professores.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfessoresFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessoresFindUniqueArgs<ExtArgs>>
    ): Prisma__ProfessoresClient<$Result.GetResult<Prisma.$ProfessoresPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Professores that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProfessoresFindUniqueOrThrowArgs} args - Arguments to find a Professores
     * @example
     * // Get one Professores
     * const professores = await prisma.professores.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfessoresFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessoresFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProfessoresClient<$Result.GetResult<Prisma.$ProfessoresPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Professores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessoresFindFirstArgs} args - Arguments to find a Professores
     * @example
     * // Get one Professores
     * const professores = await prisma.professores.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfessoresFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessoresFindFirstArgs<ExtArgs>>
    ): Prisma__ProfessoresClient<$Result.GetResult<Prisma.$ProfessoresPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Professores that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessoresFindFirstOrThrowArgs} args - Arguments to find a Professores
     * @example
     * // Get one Professores
     * const professores = await prisma.professores.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfessoresFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessoresFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProfessoresClient<$Result.GetResult<Prisma.$ProfessoresPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Professores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessoresFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Professores
     * const professores = await prisma.professores.findMany()
     * 
     * // Get first 10 Professores
     * const professores = await prisma.professores.findMany({ take: 10 })
     * 
     * // Only select the `nome`
     * const professoresWithNomeOnly = await prisma.professores.findMany({ select: { nome: true } })
     * 
    **/
    findMany<T extends ProfessoresFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessoresFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessoresPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Professores.
     * @param {ProfessoresCreateArgs} args - Arguments to create a Professores.
     * @example
     * // Create one Professores
     * const Professores = await prisma.professores.create({
     *   data: {
     *     // ... data to create a Professores
     *   }
     * })
     * 
    **/
    create<T extends ProfessoresCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessoresCreateArgs<ExtArgs>>
    ): Prisma__ProfessoresClient<$Result.GetResult<Prisma.$ProfessoresPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Professores.
     *     @param {ProfessoresCreateManyArgs} args - Arguments to create many Professores.
     *     @example
     *     // Create many Professores
     *     const professores = await prisma.professores.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfessoresCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessoresCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Professores.
     * @param {ProfessoresDeleteArgs} args - Arguments to delete one Professores.
     * @example
     * // Delete one Professores
     * const Professores = await prisma.professores.delete({
     *   where: {
     *     // ... filter to delete one Professores
     *   }
     * })
     * 
    **/
    delete<T extends ProfessoresDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessoresDeleteArgs<ExtArgs>>
    ): Prisma__ProfessoresClient<$Result.GetResult<Prisma.$ProfessoresPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Professores.
     * @param {ProfessoresUpdateArgs} args - Arguments to update one Professores.
     * @example
     * // Update one Professores
     * const professores = await prisma.professores.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfessoresUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessoresUpdateArgs<ExtArgs>>
    ): Prisma__ProfessoresClient<$Result.GetResult<Prisma.$ProfessoresPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Professores.
     * @param {ProfessoresDeleteManyArgs} args - Arguments to filter Professores to delete.
     * @example
     * // Delete a few Professores
     * const { count } = await prisma.professores.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfessoresDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessoresDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessoresUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Professores
     * const professores = await prisma.professores.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfessoresUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessoresUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Professores.
     * @param {ProfessoresUpsertArgs} args - Arguments to update or create a Professores.
     * @example
     * // Update or create a Professores
     * const professores = await prisma.professores.upsert({
     *   create: {
     *     // ... data to create a Professores
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Professores we want to update
     *   }
     * })
    **/
    upsert<T extends ProfessoresUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessoresUpsertArgs<ExtArgs>>
    ): Prisma__ProfessoresClient<$Result.GetResult<Prisma.$ProfessoresPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Professores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessoresCountArgs} args - Arguments to filter Professores to count.
     * @example
     * // Count the number of Professores
     * const count = await prisma.professores.count({
     *   where: {
     *     // ... the filter for the Professores we want to count
     *   }
     * })
    **/
    count<T extends ProfessoresCountArgs>(
      args?: Subset<T, ProfessoresCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessoresCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Professores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessoresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessoresAggregateArgs>(args: Subset<T, ProfessoresAggregateArgs>): Prisma.PrismaPromise<GetProfessoresAggregateType<T>>

    /**
     * Group by Professores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessoresGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessoresGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessoresGroupByArgs['orderBy'] }
        : { orderBy?: ProfessoresGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessoresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessoresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Professores model
   */
  readonly fields: ProfessoresFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Professores.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessoresClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Professores model
   */ 
  interface ProfessoresFieldRefs {
    readonly nome: FieldRef<"Professores", 'String'>
    readonly materia: FieldRef<"Professores", 'String'>
    readonly tit: FieldRef<"Professores", 'String'>
    readonly foto: FieldRef<"Professores", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Professores findUnique
   */
  export type ProfessoresFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professores
     */
    select?: ProfessoresSelect<ExtArgs> | null
    /**
     * Filter, which Professores to fetch.
     */
    where: ProfessoresWhereUniqueInput
  }


  /**
   * Professores findUniqueOrThrow
   */
  export type ProfessoresFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professores
     */
    select?: ProfessoresSelect<ExtArgs> | null
    /**
     * Filter, which Professores to fetch.
     */
    where: ProfessoresWhereUniqueInput
  }


  /**
   * Professores findFirst
   */
  export type ProfessoresFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professores
     */
    select?: ProfessoresSelect<ExtArgs> | null
    /**
     * Filter, which Professores to fetch.
     */
    where?: ProfessoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professores to fetch.
     */
    orderBy?: ProfessoresOrderByWithRelationInput | ProfessoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professores.
     */
    cursor?: ProfessoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professores.
     */
    distinct?: ProfessoresScalarFieldEnum | ProfessoresScalarFieldEnum[]
  }


  /**
   * Professores findFirstOrThrow
   */
  export type ProfessoresFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professores
     */
    select?: ProfessoresSelect<ExtArgs> | null
    /**
     * Filter, which Professores to fetch.
     */
    where?: ProfessoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professores to fetch.
     */
    orderBy?: ProfessoresOrderByWithRelationInput | ProfessoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professores.
     */
    cursor?: ProfessoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professores.
     */
    distinct?: ProfessoresScalarFieldEnum | ProfessoresScalarFieldEnum[]
  }


  /**
   * Professores findMany
   */
  export type ProfessoresFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professores
     */
    select?: ProfessoresSelect<ExtArgs> | null
    /**
     * Filter, which Professores to fetch.
     */
    where?: ProfessoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professores to fetch.
     */
    orderBy?: ProfessoresOrderByWithRelationInput | ProfessoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Professores.
     */
    cursor?: ProfessoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professores.
     */
    skip?: number
    distinct?: ProfessoresScalarFieldEnum | ProfessoresScalarFieldEnum[]
  }


  /**
   * Professores create
   */
  export type ProfessoresCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professores
     */
    select?: ProfessoresSelect<ExtArgs> | null
    /**
     * The data needed to create a Professores.
     */
    data: XOR<ProfessoresCreateInput, ProfessoresUncheckedCreateInput>
  }


  /**
   * Professores createMany
   */
  export type ProfessoresCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Professores.
     */
    data: ProfessoresCreateManyInput | ProfessoresCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Professores update
   */
  export type ProfessoresUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professores
     */
    select?: ProfessoresSelect<ExtArgs> | null
    /**
     * The data needed to update a Professores.
     */
    data: XOR<ProfessoresUpdateInput, ProfessoresUncheckedUpdateInput>
    /**
     * Choose, which Professores to update.
     */
    where: ProfessoresWhereUniqueInput
  }


  /**
   * Professores updateMany
   */
  export type ProfessoresUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Professores.
     */
    data: XOR<ProfessoresUpdateManyMutationInput, ProfessoresUncheckedUpdateManyInput>
    /**
     * Filter which Professores to update
     */
    where?: ProfessoresWhereInput
  }


  /**
   * Professores upsert
   */
  export type ProfessoresUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professores
     */
    select?: ProfessoresSelect<ExtArgs> | null
    /**
     * The filter to search for the Professores to update in case it exists.
     */
    where: ProfessoresWhereUniqueInput
    /**
     * In case the Professores found by the `where` argument doesn't exist, create a new Professores with this data.
     */
    create: XOR<ProfessoresCreateInput, ProfessoresUncheckedCreateInput>
    /**
     * In case the Professores was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessoresUpdateInput, ProfessoresUncheckedUpdateInput>
  }


  /**
   * Professores delete
   */
  export type ProfessoresDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professores
     */
    select?: ProfessoresSelect<ExtArgs> | null
    /**
     * Filter which Professores to delete.
     */
    where: ProfessoresWhereUniqueInput
  }


  /**
   * Professores deleteMany
   */
  export type ProfessoresDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professores to delete
     */
    where?: ProfessoresWhereInput
  }


  /**
   * Professores without action
   */
  export type ProfessoresDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professores
     */
    select?: ProfessoresSelect<ExtArgs> | null
  }



  /**
   * Model Unidades
   */

  export type AggregateUnidades = {
    _count: UnidadesCountAggregateOutputType | null
    _min: UnidadesMinAggregateOutputType | null
    _max: UnidadesMaxAggregateOutputType | null
  }

  export type UnidadesMinAggregateOutputType = {
    codigo: string | null
    nome: string | null
    informacoes: string | null
    vcep: string | null
    numeroTel: string | null
    numeroWpp: string | null
    horario: string | null
  }

  export type UnidadesMaxAggregateOutputType = {
    codigo: string | null
    nome: string | null
    informacoes: string | null
    vcep: string | null
    numeroTel: string | null
    numeroWpp: string | null
    horario: string | null
  }

  export type UnidadesCountAggregateOutputType = {
    codigo: number
    nome: number
    informacoes: number
    vcep: number
    numeroTel: number
    numeroWpp: number
    horario: number
    _all: number
  }


  export type UnidadesMinAggregateInputType = {
    codigo?: true
    nome?: true
    informacoes?: true
    vcep?: true
    numeroTel?: true
    numeroWpp?: true
    horario?: true
  }

  export type UnidadesMaxAggregateInputType = {
    codigo?: true
    nome?: true
    informacoes?: true
    vcep?: true
    numeroTel?: true
    numeroWpp?: true
    horario?: true
  }

  export type UnidadesCountAggregateInputType = {
    codigo?: true
    nome?: true
    informacoes?: true
    vcep?: true
    numeroTel?: true
    numeroWpp?: true
    horario?: true
    _all?: true
  }

  export type UnidadesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Unidades to aggregate.
     */
    where?: UnidadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Unidades to fetch.
     */
    orderBy?: UnidadesOrderByWithRelationInput | UnidadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UnidadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Unidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Unidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Unidades
    **/
    _count?: true | UnidadesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UnidadesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UnidadesMaxAggregateInputType
  }

  export type GetUnidadesAggregateType<T extends UnidadesAggregateArgs> = {
        [P in keyof T & keyof AggregateUnidades]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUnidades[P]>
      : GetScalarType<T[P], AggregateUnidades[P]>
  }




  export type UnidadesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UnidadesWhereInput
    orderBy?: UnidadesOrderByWithAggregationInput | UnidadesOrderByWithAggregationInput[]
    by: UnidadesScalarFieldEnum[] | UnidadesScalarFieldEnum
    having?: UnidadesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UnidadesCountAggregateInputType | true
    _min?: UnidadesMinAggregateInputType
    _max?: UnidadesMaxAggregateInputType
  }

  export type UnidadesGroupByOutputType = {
    codigo: string
    nome: string
    informacoes: string
    vcep: string
    numeroTel: string
    numeroWpp: string
    horario: string
    _count: UnidadesCountAggregateOutputType | null
    _min: UnidadesMinAggregateOutputType | null
    _max: UnidadesMaxAggregateOutputType | null
  }

  type GetUnidadesGroupByPayload<T extends UnidadesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UnidadesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UnidadesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UnidadesGroupByOutputType[P]>
            : GetScalarType<T[P], UnidadesGroupByOutputType[P]>
        }
      >
    >


  export type UnidadesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    codigo?: boolean
    nome?: boolean
    informacoes?: boolean
    vcep?: boolean
    numeroTel?: boolean
    numeroWpp?: boolean
    horario?: boolean
  }, ExtArgs["result"]["unidades"]>

  export type UnidadesSelectScalar = {
    codigo?: boolean
    nome?: boolean
    informacoes?: boolean
    vcep?: boolean
    numeroTel?: boolean
    numeroWpp?: boolean
    horario?: boolean
  }


  export type $UnidadesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Unidades"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      codigo: string
      nome: string
      informacoes: string
      vcep: string
      numeroTel: string
      numeroWpp: string
      horario: string
    }, ExtArgs["result"]["unidades"]>
    composites: {}
  }


  type UnidadesGetPayload<S extends boolean | null | undefined | UnidadesDefaultArgs> = $Result.GetResult<Prisma.$UnidadesPayload, S>

  type UnidadesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UnidadesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UnidadesCountAggregateInputType | true
    }

  export interface UnidadesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Unidades'], meta: { name: 'Unidades' } }
    /**
     * Find zero or one Unidades that matches the filter.
     * @param {UnidadesFindUniqueArgs} args - Arguments to find a Unidades
     * @example
     * // Get one Unidades
     * const unidades = await prisma.unidades.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UnidadesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UnidadesFindUniqueArgs<ExtArgs>>
    ): Prisma__UnidadesClient<$Result.GetResult<Prisma.$UnidadesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Unidades that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UnidadesFindUniqueOrThrowArgs} args - Arguments to find a Unidades
     * @example
     * // Get one Unidades
     * const unidades = await prisma.unidades.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UnidadesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UnidadesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UnidadesClient<$Result.GetResult<Prisma.$UnidadesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Unidades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnidadesFindFirstArgs} args - Arguments to find a Unidades
     * @example
     * // Get one Unidades
     * const unidades = await prisma.unidades.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UnidadesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UnidadesFindFirstArgs<ExtArgs>>
    ): Prisma__UnidadesClient<$Result.GetResult<Prisma.$UnidadesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Unidades that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnidadesFindFirstOrThrowArgs} args - Arguments to find a Unidades
     * @example
     * // Get one Unidades
     * const unidades = await prisma.unidades.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UnidadesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UnidadesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UnidadesClient<$Result.GetResult<Prisma.$UnidadesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Unidades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnidadesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Unidades
     * const unidades = await prisma.unidades.findMany()
     * 
     * // Get first 10 Unidades
     * const unidades = await prisma.unidades.findMany({ take: 10 })
     * 
     * // Only select the `codigo`
     * const unidadesWithCodigoOnly = await prisma.unidades.findMany({ select: { codigo: true } })
     * 
    **/
    findMany<T extends UnidadesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UnidadesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnidadesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Unidades.
     * @param {UnidadesCreateArgs} args - Arguments to create a Unidades.
     * @example
     * // Create one Unidades
     * const Unidades = await prisma.unidades.create({
     *   data: {
     *     // ... data to create a Unidades
     *   }
     * })
     * 
    **/
    create<T extends UnidadesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UnidadesCreateArgs<ExtArgs>>
    ): Prisma__UnidadesClient<$Result.GetResult<Prisma.$UnidadesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Unidades.
     *     @param {UnidadesCreateManyArgs} args - Arguments to create many Unidades.
     *     @example
     *     // Create many Unidades
     *     const unidades = await prisma.unidades.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UnidadesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UnidadesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Unidades.
     * @param {UnidadesDeleteArgs} args - Arguments to delete one Unidades.
     * @example
     * // Delete one Unidades
     * const Unidades = await prisma.unidades.delete({
     *   where: {
     *     // ... filter to delete one Unidades
     *   }
     * })
     * 
    **/
    delete<T extends UnidadesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UnidadesDeleteArgs<ExtArgs>>
    ): Prisma__UnidadesClient<$Result.GetResult<Prisma.$UnidadesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Unidades.
     * @param {UnidadesUpdateArgs} args - Arguments to update one Unidades.
     * @example
     * // Update one Unidades
     * const unidades = await prisma.unidades.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UnidadesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UnidadesUpdateArgs<ExtArgs>>
    ): Prisma__UnidadesClient<$Result.GetResult<Prisma.$UnidadesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Unidades.
     * @param {UnidadesDeleteManyArgs} args - Arguments to filter Unidades to delete.
     * @example
     * // Delete a few Unidades
     * const { count } = await prisma.unidades.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UnidadesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UnidadesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Unidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnidadesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Unidades
     * const unidades = await prisma.unidades.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UnidadesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UnidadesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Unidades.
     * @param {UnidadesUpsertArgs} args - Arguments to update or create a Unidades.
     * @example
     * // Update or create a Unidades
     * const unidades = await prisma.unidades.upsert({
     *   create: {
     *     // ... data to create a Unidades
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Unidades we want to update
     *   }
     * })
    **/
    upsert<T extends UnidadesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UnidadesUpsertArgs<ExtArgs>>
    ): Prisma__UnidadesClient<$Result.GetResult<Prisma.$UnidadesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Unidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnidadesCountArgs} args - Arguments to filter Unidades to count.
     * @example
     * // Count the number of Unidades
     * const count = await prisma.unidades.count({
     *   where: {
     *     // ... the filter for the Unidades we want to count
     *   }
     * })
    **/
    count<T extends UnidadesCountArgs>(
      args?: Subset<T, UnidadesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UnidadesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Unidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnidadesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UnidadesAggregateArgs>(args: Subset<T, UnidadesAggregateArgs>): Prisma.PrismaPromise<GetUnidadesAggregateType<T>>

    /**
     * Group by Unidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnidadesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UnidadesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UnidadesGroupByArgs['orderBy'] }
        : { orderBy?: UnidadesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UnidadesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUnidadesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Unidades model
   */
  readonly fields: UnidadesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Unidades.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UnidadesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Unidades model
   */ 
  interface UnidadesFieldRefs {
    readonly codigo: FieldRef<"Unidades", 'String'>
    readonly nome: FieldRef<"Unidades", 'String'>
    readonly informacoes: FieldRef<"Unidades", 'String'>
    readonly vcep: FieldRef<"Unidades", 'String'>
    readonly numeroTel: FieldRef<"Unidades", 'String'>
    readonly numeroWpp: FieldRef<"Unidades", 'String'>
    readonly horario: FieldRef<"Unidades", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Unidades findUnique
   */
  export type UnidadesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelect<ExtArgs> | null
    /**
     * Filter, which Unidades to fetch.
     */
    where: UnidadesWhereUniqueInput
  }


  /**
   * Unidades findUniqueOrThrow
   */
  export type UnidadesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelect<ExtArgs> | null
    /**
     * Filter, which Unidades to fetch.
     */
    where: UnidadesWhereUniqueInput
  }


  /**
   * Unidades findFirst
   */
  export type UnidadesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelect<ExtArgs> | null
    /**
     * Filter, which Unidades to fetch.
     */
    where?: UnidadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Unidades to fetch.
     */
    orderBy?: UnidadesOrderByWithRelationInput | UnidadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Unidades.
     */
    cursor?: UnidadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Unidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Unidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Unidades.
     */
    distinct?: UnidadesScalarFieldEnum | UnidadesScalarFieldEnum[]
  }


  /**
   * Unidades findFirstOrThrow
   */
  export type UnidadesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelect<ExtArgs> | null
    /**
     * Filter, which Unidades to fetch.
     */
    where?: UnidadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Unidades to fetch.
     */
    orderBy?: UnidadesOrderByWithRelationInput | UnidadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Unidades.
     */
    cursor?: UnidadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Unidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Unidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Unidades.
     */
    distinct?: UnidadesScalarFieldEnum | UnidadesScalarFieldEnum[]
  }


  /**
   * Unidades findMany
   */
  export type UnidadesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelect<ExtArgs> | null
    /**
     * Filter, which Unidades to fetch.
     */
    where?: UnidadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Unidades to fetch.
     */
    orderBy?: UnidadesOrderByWithRelationInput | UnidadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Unidades.
     */
    cursor?: UnidadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Unidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Unidades.
     */
    skip?: number
    distinct?: UnidadesScalarFieldEnum | UnidadesScalarFieldEnum[]
  }


  /**
   * Unidades create
   */
  export type UnidadesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelect<ExtArgs> | null
    /**
     * The data needed to create a Unidades.
     */
    data: XOR<UnidadesCreateInput, UnidadesUncheckedCreateInput>
  }


  /**
   * Unidades createMany
   */
  export type UnidadesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Unidades.
     */
    data: UnidadesCreateManyInput | UnidadesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Unidades update
   */
  export type UnidadesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelect<ExtArgs> | null
    /**
     * The data needed to update a Unidades.
     */
    data: XOR<UnidadesUpdateInput, UnidadesUncheckedUpdateInput>
    /**
     * Choose, which Unidades to update.
     */
    where: UnidadesWhereUniqueInput
  }


  /**
   * Unidades updateMany
   */
  export type UnidadesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Unidades.
     */
    data: XOR<UnidadesUpdateManyMutationInput, UnidadesUncheckedUpdateManyInput>
    /**
     * Filter which Unidades to update
     */
    where?: UnidadesWhereInput
  }


  /**
   * Unidades upsert
   */
  export type UnidadesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelect<ExtArgs> | null
    /**
     * The filter to search for the Unidades to update in case it exists.
     */
    where: UnidadesWhereUniqueInput
    /**
     * In case the Unidades found by the `where` argument doesn't exist, create a new Unidades with this data.
     */
    create: XOR<UnidadesCreateInput, UnidadesUncheckedCreateInput>
    /**
     * In case the Unidades was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UnidadesUpdateInput, UnidadesUncheckedUpdateInput>
  }


  /**
   * Unidades delete
   */
  export type UnidadesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelect<ExtArgs> | null
    /**
     * Filter which Unidades to delete.
     */
    where: UnidadesWhereUniqueInput
  }


  /**
   * Unidades deleteMany
   */
  export type UnidadesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Unidades to delete
     */
    where?: UnidadesWhereInput
  }


  /**
   * Unidades without action
   */
  export type UnidadesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelect<ExtArgs> | null
  }



  /**
   * Model Pagina
   */

  export type AggregatePagina = {
    _count: PaginaCountAggregateOutputType | null
    _avg: PaginaAvgAggregateOutputType | null
    _sum: PaginaSumAggregateOutputType | null
    _min: PaginaMinAggregateOutputType | null
    _max: PaginaMaxAggregateOutputType | null
  }

  export type PaginaAvgAggregateOutputType = {
    userId: number | null
  }

  export type PaginaSumAggregateOutputType = {
    userId: number | null
  }

  export type PaginaMinAggregateOutputType = {
    id: string | null
    publica: boolean | null
    userId: number | null
  }

  export type PaginaMaxAggregateOutputType = {
    id: string | null
    publica: boolean | null
    userId: number | null
  }

  export type PaginaCountAggregateOutputType = {
    id: number
    publica: number
    userId: number
    _all: number
  }


  export type PaginaAvgAggregateInputType = {
    userId?: true
  }

  export type PaginaSumAggregateInputType = {
    userId?: true
  }

  export type PaginaMinAggregateInputType = {
    id?: true
    publica?: true
    userId?: true
  }

  export type PaginaMaxAggregateInputType = {
    id?: true
    publica?: true
    userId?: true
  }

  export type PaginaCountAggregateInputType = {
    id?: true
    publica?: true
    userId?: true
    _all?: true
  }

  export type PaginaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pagina to aggregate.
     */
    where?: PaginaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paginas to fetch.
     */
    orderBy?: PaginaOrderByWithRelationInput | PaginaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaginaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paginas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paginas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Paginas
    **/
    _count?: true | PaginaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaginaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaginaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaginaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaginaMaxAggregateInputType
  }

  export type GetPaginaAggregateType<T extends PaginaAggregateArgs> = {
        [P in keyof T & keyof AggregatePagina]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePagina[P]>
      : GetScalarType<T[P], AggregatePagina[P]>
  }




  export type PaginaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaginaWhereInput
    orderBy?: PaginaOrderByWithAggregationInput | PaginaOrderByWithAggregationInput[]
    by: PaginaScalarFieldEnum[] | PaginaScalarFieldEnum
    having?: PaginaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaginaCountAggregateInputType | true
    _avg?: PaginaAvgAggregateInputType
    _sum?: PaginaSumAggregateInputType
    _min?: PaginaMinAggregateInputType
    _max?: PaginaMaxAggregateInputType
  }

  export type PaginaGroupByOutputType = {
    id: string
    publica: boolean
    userId: number
    _count: PaginaCountAggregateOutputType | null
    _avg: PaginaAvgAggregateOutputType | null
    _sum: PaginaSumAggregateOutputType | null
    _min: PaginaMinAggregateOutputType | null
    _max: PaginaMaxAggregateOutputType | null
  }

  type GetPaginaGroupByPayload<T extends PaginaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaginaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaginaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaginaGroupByOutputType[P]>
            : GetScalarType<T[P], PaginaGroupByOutputType[P]>
        }
      >
    >


  export type PaginaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    publica?: boolean
    userId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    tipos?: boolean | Pagina$tiposArgs<ExtArgs>
    _count?: boolean | PaginaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pagina"]>

  export type PaginaSelectScalar = {
    id?: boolean
    publica?: boolean
    userId?: boolean
  }

  export type PaginaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    tipos?: boolean | Pagina$tiposArgs<ExtArgs>
    _count?: boolean | PaginaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PaginaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pagina"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      tipos: Prisma.$TipoDocumentoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      publica: boolean
      userId: number
    }, ExtArgs["result"]["pagina"]>
    composites: {}
  }


  type PaginaGetPayload<S extends boolean | null | undefined | PaginaDefaultArgs> = $Result.GetResult<Prisma.$PaginaPayload, S>

  type PaginaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaginaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaginaCountAggregateInputType | true
    }

  export interface PaginaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pagina'], meta: { name: 'Pagina' } }
    /**
     * Find zero or one Pagina that matches the filter.
     * @param {PaginaFindUniqueArgs} args - Arguments to find a Pagina
     * @example
     * // Get one Pagina
     * const pagina = await prisma.pagina.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PaginaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PaginaFindUniqueArgs<ExtArgs>>
    ): Prisma__PaginaClient<$Result.GetResult<Prisma.$PaginaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Pagina that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PaginaFindUniqueOrThrowArgs} args - Arguments to find a Pagina
     * @example
     * // Get one Pagina
     * const pagina = await prisma.pagina.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PaginaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PaginaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PaginaClient<$Result.GetResult<Prisma.$PaginaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Pagina that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaginaFindFirstArgs} args - Arguments to find a Pagina
     * @example
     * // Get one Pagina
     * const pagina = await prisma.pagina.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PaginaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PaginaFindFirstArgs<ExtArgs>>
    ): Prisma__PaginaClient<$Result.GetResult<Prisma.$PaginaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Pagina that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaginaFindFirstOrThrowArgs} args - Arguments to find a Pagina
     * @example
     * // Get one Pagina
     * const pagina = await prisma.pagina.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PaginaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PaginaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PaginaClient<$Result.GetResult<Prisma.$PaginaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Paginas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaginaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Paginas
     * const paginas = await prisma.pagina.findMany()
     * 
     * // Get first 10 Paginas
     * const paginas = await prisma.pagina.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paginaWithIdOnly = await prisma.pagina.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PaginaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaginaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaginaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Pagina.
     * @param {PaginaCreateArgs} args - Arguments to create a Pagina.
     * @example
     * // Create one Pagina
     * const Pagina = await prisma.pagina.create({
     *   data: {
     *     // ... data to create a Pagina
     *   }
     * })
     * 
    **/
    create<T extends PaginaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PaginaCreateArgs<ExtArgs>>
    ): Prisma__PaginaClient<$Result.GetResult<Prisma.$PaginaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Paginas.
     *     @param {PaginaCreateManyArgs} args - Arguments to create many Paginas.
     *     @example
     *     // Create many Paginas
     *     const pagina = await prisma.pagina.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PaginaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaginaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pagina.
     * @param {PaginaDeleteArgs} args - Arguments to delete one Pagina.
     * @example
     * // Delete one Pagina
     * const Pagina = await prisma.pagina.delete({
     *   where: {
     *     // ... filter to delete one Pagina
     *   }
     * })
     * 
    **/
    delete<T extends PaginaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PaginaDeleteArgs<ExtArgs>>
    ): Prisma__PaginaClient<$Result.GetResult<Prisma.$PaginaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Pagina.
     * @param {PaginaUpdateArgs} args - Arguments to update one Pagina.
     * @example
     * // Update one Pagina
     * const pagina = await prisma.pagina.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PaginaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PaginaUpdateArgs<ExtArgs>>
    ): Prisma__PaginaClient<$Result.GetResult<Prisma.$PaginaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Paginas.
     * @param {PaginaDeleteManyArgs} args - Arguments to filter Paginas to delete.
     * @example
     * // Delete a few Paginas
     * const { count } = await prisma.pagina.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PaginaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaginaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Paginas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaginaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Paginas
     * const pagina = await prisma.pagina.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PaginaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PaginaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pagina.
     * @param {PaginaUpsertArgs} args - Arguments to update or create a Pagina.
     * @example
     * // Update or create a Pagina
     * const pagina = await prisma.pagina.upsert({
     *   create: {
     *     // ... data to create a Pagina
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pagina we want to update
     *   }
     * })
    **/
    upsert<T extends PaginaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PaginaUpsertArgs<ExtArgs>>
    ): Prisma__PaginaClient<$Result.GetResult<Prisma.$PaginaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Paginas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaginaCountArgs} args - Arguments to filter Paginas to count.
     * @example
     * // Count the number of Paginas
     * const count = await prisma.pagina.count({
     *   where: {
     *     // ... the filter for the Paginas we want to count
     *   }
     * })
    **/
    count<T extends PaginaCountArgs>(
      args?: Subset<T, PaginaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaginaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pagina.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaginaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaginaAggregateArgs>(args: Subset<T, PaginaAggregateArgs>): Prisma.PrismaPromise<GetPaginaAggregateType<T>>

    /**
     * Group by Pagina.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaginaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaginaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaginaGroupByArgs['orderBy'] }
        : { orderBy?: PaginaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaginaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaginaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pagina model
   */
  readonly fields: PaginaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pagina.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaginaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    tipos<T extends Pagina$tiposArgs<ExtArgs> = {}>(args?: Subset<T, Pagina$tiposArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipoDocumentoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Pagina model
   */ 
  interface PaginaFieldRefs {
    readonly id: FieldRef<"Pagina", 'String'>
    readonly publica: FieldRef<"Pagina", 'Boolean'>
    readonly userId: FieldRef<"Pagina", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Pagina findUnique
   */
  export type PaginaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagina
     */
    select?: PaginaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaginaInclude<ExtArgs> | null
    /**
     * Filter, which Pagina to fetch.
     */
    where: PaginaWhereUniqueInput
  }


  /**
   * Pagina findUniqueOrThrow
   */
  export type PaginaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagina
     */
    select?: PaginaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaginaInclude<ExtArgs> | null
    /**
     * Filter, which Pagina to fetch.
     */
    where: PaginaWhereUniqueInput
  }


  /**
   * Pagina findFirst
   */
  export type PaginaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagina
     */
    select?: PaginaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaginaInclude<ExtArgs> | null
    /**
     * Filter, which Pagina to fetch.
     */
    where?: PaginaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paginas to fetch.
     */
    orderBy?: PaginaOrderByWithRelationInput | PaginaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Paginas.
     */
    cursor?: PaginaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paginas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paginas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Paginas.
     */
    distinct?: PaginaScalarFieldEnum | PaginaScalarFieldEnum[]
  }


  /**
   * Pagina findFirstOrThrow
   */
  export type PaginaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagina
     */
    select?: PaginaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaginaInclude<ExtArgs> | null
    /**
     * Filter, which Pagina to fetch.
     */
    where?: PaginaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paginas to fetch.
     */
    orderBy?: PaginaOrderByWithRelationInput | PaginaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Paginas.
     */
    cursor?: PaginaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paginas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paginas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Paginas.
     */
    distinct?: PaginaScalarFieldEnum | PaginaScalarFieldEnum[]
  }


  /**
   * Pagina findMany
   */
  export type PaginaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagina
     */
    select?: PaginaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaginaInclude<ExtArgs> | null
    /**
     * Filter, which Paginas to fetch.
     */
    where?: PaginaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paginas to fetch.
     */
    orderBy?: PaginaOrderByWithRelationInput | PaginaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Paginas.
     */
    cursor?: PaginaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paginas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paginas.
     */
    skip?: number
    distinct?: PaginaScalarFieldEnum | PaginaScalarFieldEnum[]
  }


  /**
   * Pagina create
   */
  export type PaginaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagina
     */
    select?: PaginaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaginaInclude<ExtArgs> | null
    /**
     * The data needed to create a Pagina.
     */
    data: XOR<PaginaCreateInput, PaginaUncheckedCreateInput>
  }


  /**
   * Pagina createMany
   */
  export type PaginaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Paginas.
     */
    data: PaginaCreateManyInput | PaginaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Pagina update
   */
  export type PaginaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagina
     */
    select?: PaginaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaginaInclude<ExtArgs> | null
    /**
     * The data needed to update a Pagina.
     */
    data: XOR<PaginaUpdateInput, PaginaUncheckedUpdateInput>
    /**
     * Choose, which Pagina to update.
     */
    where: PaginaWhereUniqueInput
  }


  /**
   * Pagina updateMany
   */
  export type PaginaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Paginas.
     */
    data: XOR<PaginaUpdateManyMutationInput, PaginaUncheckedUpdateManyInput>
    /**
     * Filter which Paginas to update
     */
    where?: PaginaWhereInput
  }


  /**
   * Pagina upsert
   */
  export type PaginaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagina
     */
    select?: PaginaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaginaInclude<ExtArgs> | null
    /**
     * The filter to search for the Pagina to update in case it exists.
     */
    where: PaginaWhereUniqueInput
    /**
     * In case the Pagina found by the `where` argument doesn't exist, create a new Pagina with this data.
     */
    create: XOR<PaginaCreateInput, PaginaUncheckedCreateInput>
    /**
     * In case the Pagina was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaginaUpdateInput, PaginaUncheckedUpdateInput>
  }


  /**
   * Pagina delete
   */
  export type PaginaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagina
     */
    select?: PaginaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaginaInclude<ExtArgs> | null
    /**
     * Filter which Pagina to delete.
     */
    where: PaginaWhereUniqueInput
  }


  /**
   * Pagina deleteMany
   */
  export type PaginaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Paginas to delete
     */
    where?: PaginaWhereInput
  }


  /**
   * Pagina.tipos
   */
  export type Pagina$tiposArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
    where?: TipoDocumentoWhereInput
    orderBy?: TipoDocumentoOrderByWithRelationInput | TipoDocumentoOrderByWithRelationInput[]
    cursor?: TipoDocumentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TipoDocumentoScalarFieldEnum | TipoDocumentoScalarFieldEnum[]
  }


  /**
   * Pagina without action
   */
  export type PaginaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagina
     */
    select?: PaginaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaginaInclude<ExtArgs> | null
  }



  /**
   * Model TipoDocumento
   */

  export type AggregateTipoDocumento = {
    _count: TipoDocumentoCountAggregateOutputType | null
    _avg: TipoDocumentoAvgAggregateOutputType | null
    _sum: TipoDocumentoSumAggregateOutputType | null
    _min: TipoDocumentoMinAggregateOutputType | null
    _max: TipoDocumentoMaxAggregateOutputType | null
  }

  export type TipoDocumentoAvgAggregateOutputType = {
    id: number | null
    type: number | null
  }

  export type TipoDocumentoSumAggregateOutputType = {
    id: number | null
    type: number | null
  }

  export type TipoDocumentoMinAggregateOutputType = {
    id: number | null
    type: number | null
    text: string | null
    img: string | null
    paginaId: string | null
  }

  export type TipoDocumentoMaxAggregateOutputType = {
    id: number | null
    type: number | null
    text: string | null
    img: string | null
    paginaId: string | null
  }

  export type TipoDocumentoCountAggregateOutputType = {
    id: number
    type: number
    text: number
    img: number
    paginaId: number
    _all: number
  }


  export type TipoDocumentoAvgAggregateInputType = {
    id?: true
    type?: true
  }

  export type TipoDocumentoSumAggregateInputType = {
    id?: true
    type?: true
  }

  export type TipoDocumentoMinAggregateInputType = {
    id?: true
    type?: true
    text?: true
    img?: true
    paginaId?: true
  }

  export type TipoDocumentoMaxAggregateInputType = {
    id?: true
    type?: true
    text?: true
    img?: true
    paginaId?: true
  }

  export type TipoDocumentoCountAggregateInputType = {
    id?: true
    type?: true
    text?: true
    img?: true
    paginaId?: true
    _all?: true
  }

  export type TipoDocumentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TipoDocumento to aggregate.
     */
    where?: TipoDocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoDocumentos to fetch.
     */
    orderBy?: TipoDocumentoOrderByWithRelationInput | TipoDocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TipoDocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoDocumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoDocumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TipoDocumentos
    **/
    _count?: true | TipoDocumentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TipoDocumentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TipoDocumentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TipoDocumentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TipoDocumentoMaxAggregateInputType
  }

  export type GetTipoDocumentoAggregateType<T extends TipoDocumentoAggregateArgs> = {
        [P in keyof T & keyof AggregateTipoDocumento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTipoDocumento[P]>
      : GetScalarType<T[P], AggregateTipoDocumento[P]>
  }




  export type TipoDocumentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TipoDocumentoWhereInput
    orderBy?: TipoDocumentoOrderByWithAggregationInput | TipoDocumentoOrderByWithAggregationInput[]
    by: TipoDocumentoScalarFieldEnum[] | TipoDocumentoScalarFieldEnum
    having?: TipoDocumentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TipoDocumentoCountAggregateInputType | true
    _avg?: TipoDocumentoAvgAggregateInputType
    _sum?: TipoDocumentoSumAggregateInputType
    _min?: TipoDocumentoMinAggregateInputType
    _max?: TipoDocumentoMaxAggregateInputType
  }

  export type TipoDocumentoGroupByOutputType = {
    id: number
    type: number
    text: string
    img: string
    paginaId: string
    _count: TipoDocumentoCountAggregateOutputType | null
    _avg: TipoDocumentoAvgAggregateOutputType | null
    _sum: TipoDocumentoSumAggregateOutputType | null
    _min: TipoDocumentoMinAggregateOutputType | null
    _max: TipoDocumentoMaxAggregateOutputType | null
  }

  type GetTipoDocumentoGroupByPayload<T extends TipoDocumentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TipoDocumentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TipoDocumentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TipoDocumentoGroupByOutputType[P]>
            : GetScalarType<T[P], TipoDocumentoGroupByOutputType[P]>
        }
      >
    >


  export type TipoDocumentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    text?: boolean
    img?: boolean
    paginaId?: boolean
    pagina?: boolean | PaginaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tipoDocumento"]>

  export type TipoDocumentoSelectScalar = {
    id?: boolean
    type?: boolean
    text?: boolean
    img?: boolean
    paginaId?: boolean
  }

  export type TipoDocumentoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pagina?: boolean | PaginaDefaultArgs<ExtArgs>
  }


  export type $TipoDocumentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TipoDocumento"
    objects: {
      pagina: Prisma.$PaginaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: number
      text: string
      img: string
      paginaId: string
    }, ExtArgs["result"]["tipoDocumento"]>
    composites: {}
  }


  type TipoDocumentoGetPayload<S extends boolean | null | undefined | TipoDocumentoDefaultArgs> = $Result.GetResult<Prisma.$TipoDocumentoPayload, S>

  type TipoDocumentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TipoDocumentoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TipoDocumentoCountAggregateInputType | true
    }

  export interface TipoDocumentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TipoDocumento'], meta: { name: 'TipoDocumento' } }
    /**
     * Find zero or one TipoDocumento that matches the filter.
     * @param {TipoDocumentoFindUniqueArgs} args - Arguments to find a TipoDocumento
     * @example
     * // Get one TipoDocumento
     * const tipoDocumento = await prisma.tipoDocumento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TipoDocumentoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TipoDocumentoFindUniqueArgs<ExtArgs>>
    ): Prisma__TipoDocumentoClient<$Result.GetResult<Prisma.$TipoDocumentoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TipoDocumento that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TipoDocumentoFindUniqueOrThrowArgs} args - Arguments to find a TipoDocumento
     * @example
     * // Get one TipoDocumento
     * const tipoDocumento = await prisma.tipoDocumento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TipoDocumentoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TipoDocumentoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TipoDocumentoClient<$Result.GetResult<Prisma.$TipoDocumentoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TipoDocumento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDocumentoFindFirstArgs} args - Arguments to find a TipoDocumento
     * @example
     * // Get one TipoDocumento
     * const tipoDocumento = await prisma.tipoDocumento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TipoDocumentoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TipoDocumentoFindFirstArgs<ExtArgs>>
    ): Prisma__TipoDocumentoClient<$Result.GetResult<Prisma.$TipoDocumentoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TipoDocumento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDocumentoFindFirstOrThrowArgs} args - Arguments to find a TipoDocumento
     * @example
     * // Get one TipoDocumento
     * const tipoDocumento = await prisma.tipoDocumento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TipoDocumentoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TipoDocumentoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TipoDocumentoClient<$Result.GetResult<Prisma.$TipoDocumentoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TipoDocumentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDocumentoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TipoDocumentos
     * const tipoDocumentos = await prisma.tipoDocumento.findMany()
     * 
     * // Get first 10 TipoDocumentos
     * const tipoDocumentos = await prisma.tipoDocumento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tipoDocumentoWithIdOnly = await prisma.tipoDocumento.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TipoDocumentoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TipoDocumentoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipoDocumentoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TipoDocumento.
     * @param {TipoDocumentoCreateArgs} args - Arguments to create a TipoDocumento.
     * @example
     * // Create one TipoDocumento
     * const TipoDocumento = await prisma.tipoDocumento.create({
     *   data: {
     *     // ... data to create a TipoDocumento
     *   }
     * })
     * 
    **/
    create<T extends TipoDocumentoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TipoDocumentoCreateArgs<ExtArgs>>
    ): Prisma__TipoDocumentoClient<$Result.GetResult<Prisma.$TipoDocumentoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TipoDocumentos.
     *     @param {TipoDocumentoCreateManyArgs} args - Arguments to create many TipoDocumentos.
     *     @example
     *     // Create many TipoDocumentos
     *     const tipoDocumento = await prisma.tipoDocumento.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TipoDocumentoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TipoDocumentoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TipoDocumento.
     * @param {TipoDocumentoDeleteArgs} args - Arguments to delete one TipoDocumento.
     * @example
     * // Delete one TipoDocumento
     * const TipoDocumento = await prisma.tipoDocumento.delete({
     *   where: {
     *     // ... filter to delete one TipoDocumento
     *   }
     * })
     * 
    **/
    delete<T extends TipoDocumentoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TipoDocumentoDeleteArgs<ExtArgs>>
    ): Prisma__TipoDocumentoClient<$Result.GetResult<Prisma.$TipoDocumentoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TipoDocumento.
     * @param {TipoDocumentoUpdateArgs} args - Arguments to update one TipoDocumento.
     * @example
     * // Update one TipoDocumento
     * const tipoDocumento = await prisma.tipoDocumento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TipoDocumentoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TipoDocumentoUpdateArgs<ExtArgs>>
    ): Prisma__TipoDocumentoClient<$Result.GetResult<Prisma.$TipoDocumentoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TipoDocumentos.
     * @param {TipoDocumentoDeleteManyArgs} args - Arguments to filter TipoDocumentos to delete.
     * @example
     * // Delete a few TipoDocumentos
     * const { count } = await prisma.tipoDocumento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TipoDocumentoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TipoDocumentoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TipoDocumentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDocumentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TipoDocumentos
     * const tipoDocumento = await prisma.tipoDocumento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TipoDocumentoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TipoDocumentoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TipoDocumento.
     * @param {TipoDocumentoUpsertArgs} args - Arguments to update or create a TipoDocumento.
     * @example
     * // Update or create a TipoDocumento
     * const tipoDocumento = await prisma.tipoDocumento.upsert({
     *   create: {
     *     // ... data to create a TipoDocumento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TipoDocumento we want to update
     *   }
     * })
    **/
    upsert<T extends TipoDocumentoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TipoDocumentoUpsertArgs<ExtArgs>>
    ): Prisma__TipoDocumentoClient<$Result.GetResult<Prisma.$TipoDocumentoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of TipoDocumentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDocumentoCountArgs} args - Arguments to filter TipoDocumentos to count.
     * @example
     * // Count the number of TipoDocumentos
     * const count = await prisma.tipoDocumento.count({
     *   where: {
     *     // ... the filter for the TipoDocumentos we want to count
     *   }
     * })
    **/
    count<T extends TipoDocumentoCountArgs>(
      args?: Subset<T, TipoDocumentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TipoDocumentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TipoDocumento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDocumentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TipoDocumentoAggregateArgs>(args: Subset<T, TipoDocumentoAggregateArgs>): Prisma.PrismaPromise<GetTipoDocumentoAggregateType<T>>

    /**
     * Group by TipoDocumento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDocumentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TipoDocumentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TipoDocumentoGroupByArgs['orderBy'] }
        : { orderBy?: TipoDocumentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TipoDocumentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTipoDocumentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TipoDocumento model
   */
  readonly fields: TipoDocumentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TipoDocumento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TipoDocumentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    pagina<T extends PaginaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PaginaDefaultArgs<ExtArgs>>): Prisma__PaginaClient<$Result.GetResult<Prisma.$PaginaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the TipoDocumento model
   */ 
  interface TipoDocumentoFieldRefs {
    readonly id: FieldRef<"TipoDocumento", 'Int'>
    readonly type: FieldRef<"TipoDocumento", 'Int'>
    readonly text: FieldRef<"TipoDocumento", 'String'>
    readonly img: FieldRef<"TipoDocumento", 'String'>
    readonly paginaId: FieldRef<"TipoDocumento", 'String'>
  }
    

  // Custom InputTypes

  /**
   * TipoDocumento findUnique
   */
  export type TipoDocumentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
    /**
     * Filter, which TipoDocumento to fetch.
     */
    where: TipoDocumentoWhereUniqueInput
  }


  /**
   * TipoDocumento findUniqueOrThrow
   */
  export type TipoDocumentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
    /**
     * Filter, which TipoDocumento to fetch.
     */
    where: TipoDocumentoWhereUniqueInput
  }


  /**
   * TipoDocumento findFirst
   */
  export type TipoDocumentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
    /**
     * Filter, which TipoDocumento to fetch.
     */
    where?: TipoDocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoDocumentos to fetch.
     */
    orderBy?: TipoDocumentoOrderByWithRelationInput | TipoDocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipoDocumentos.
     */
    cursor?: TipoDocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoDocumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoDocumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipoDocumentos.
     */
    distinct?: TipoDocumentoScalarFieldEnum | TipoDocumentoScalarFieldEnum[]
  }


  /**
   * TipoDocumento findFirstOrThrow
   */
  export type TipoDocumentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
    /**
     * Filter, which TipoDocumento to fetch.
     */
    where?: TipoDocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoDocumentos to fetch.
     */
    orderBy?: TipoDocumentoOrderByWithRelationInput | TipoDocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipoDocumentos.
     */
    cursor?: TipoDocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoDocumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoDocumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipoDocumentos.
     */
    distinct?: TipoDocumentoScalarFieldEnum | TipoDocumentoScalarFieldEnum[]
  }


  /**
   * TipoDocumento findMany
   */
  export type TipoDocumentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
    /**
     * Filter, which TipoDocumentos to fetch.
     */
    where?: TipoDocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoDocumentos to fetch.
     */
    orderBy?: TipoDocumentoOrderByWithRelationInput | TipoDocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TipoDocumentos.
     */
    cursor?: TipoDocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoDocumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoDocumentos.
     */
    skip?: number
    distinct?: TipoDocumentoScalarFieldEnum | TipoDocumentoScalarFieldEnum[]
  }


  /**
   * TipoDocumento create
   */
  export type TipoDocumentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
    /**
     * The data needed to create a TipoDocumento.
     */
    data: XOR<TipoDocumentoCreateInput, TipoDocumentoUncheckedCreateInput>
  }


  /**
   * TipoDocumento createMany
   */
  export type TipoDocumentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TipoDocumentos.
     */
    data: TipoDocumentoCreateManyInput | TipoDocumentoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * TipoDocumento update
   */
  export type TipoDocumentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
    /**
     * The data needed to update a TipoDocumento.
     */
    data: XOR<TipoDocumentoUpdateInput, TipoDocumentoUncheckedUpdateInput>
    /**
     * Choose, which TipoDocumento to update.
     */
    where: TipoDocumentoWhereUniqueInput
  }


  /**
   * TipoDocumento updateMany
   */
  export type TipoDocumentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TipoDocumentos.
     */
    data: XOR<TipoDocumentoUpdateManyMutationInput, TipoDocumentoUncheckedUpdateManyInput>
    /**
     * Filter which TipoDocumentos to update
     */
    where?: TipoDocumentoWhereInput
  }


  /**
   * TipoDocumento upsert
   */
  export type TipoDocumentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
    /**
     * The filter to search for the TipoDocumento to update in case it exists.
     */
    where: TipoDocumentoWhereUniqueInput
    /**
     * In case the TipoDocumento found by the `where` argument doesn't exist, create a new TipoDocumento with this data.
     */
    create: XOR<TipoDocumentoCreateInput, TipoDocumentoUncheckedCreateInput>
    /**
     * In case the TipoDocumento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TipoDocumentoUpdateInput, TipoDocumentoUncheckedUpdateInput>
  }


  /**
   * TipoDocumento delete
   */
  export type TipoDocumentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
    /**
     * Filter which TipoDocumento to delete.
     */
    where: TipoDocumentoWhereUniqueInput
  }


  /**
   * TipoDocumento deleteMany
   */
  export type TipoDocumentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TipoDocumentos to delete
     */
    where?: TipoDocumentoWhereInput
  }


  /**
   * TipoDocumento without action
   */
  export type TipoDocumentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    matricula: 'matricula',
    nome: 'nome',
    senha: 'senha',
    admin: 'admin',
    isN: 'isN',
    token: 'token',
    isAuth: 'isAuth'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const SetoresScalarFieldEnum: {
    codigo: 'codigo',
    nome: 'nome',
    informacoes: 'informacoes',
    unidades: 'unidades',
    horario: 'horario',
    responsavel: 'responsavel',
    contato: 'contato'
  };

  export type SetoresScalarFieldEnum = (typeof SetoresScalarFieldEnum)[keyof typeof SetoresScalarFieldEnum]


  export const CursoScalarFieldEnum: {
    id: 'id',
    matricula: 'matricula',
    nome: 'nome',
    unidade: 'unidade',
    turno: 'turno',
    informacao: 'informacao',
    imagem: 'imagem'
  };

  export type CursoScalarFieldEnum = (typeof CursoScalarFieldEnum)[keyof typeof CursoScalarFieldEnum]


  export const CursoValorScalarFieldEnum: {
    id: 'id',
    valor_E: 'valor_E',
    valor_M: 'valor_M',
    nome: 'nome',
    unidade: 'unidade',
    turno: 'turno'
  };

  export type CursoValorScalarFieldEnum = (typeof CursoValorScalarFieldEnum)[keyof typeof CursoValorScalarFieldEnum]


  export const ProfessoresScalarFieldEnum: {
    nome: 'nome',
    materia: 'materia',
    tit: 'tit',
    foto: 'foto'
  };

  export type ProfessoresScalarFieldEnum = (typeof ProfessoresScalarFieldEnum)[keyof typeof ProfessoresScalarFieldEnum]


  export const UnidadesScalarFieldEnum: {
    codigo: 'codigo',
    nome: 'nome',
    informacoes: 'informacoes',
    vcep: 'vcep',
    numeroTel: 'numeroTel',
    numeroWpp: 'numeroWpp',
    horario: 'horario'
  };

  export type UnidadesScalarFieldEnum = (typeof UnidadesScalarFieldEnum)[keyof typeof UnidadesScalarFieldEnum]


  export const PaginaScalarFieldEnum: {
    id: 'id',
    publica: 'publica',
    userId: 'userId'
  };

  export type PaginaScalarFieldEnum = (typeof PaginaScalarFieldEnum)[keyof typeof PaginaScalarFieldEnum]


  export const TipoDocumentoScalarFieldEnum: {
    id: 'id',
    type: 'type',
    text: 'text',
    img: 'img',
    paginaId: 'paginaId'
  };

  export type TipoDocumentoScalarFieldEnum = (typeof TipoDocumentoScalarFieldEnum)[keyof typeof TipoDocumentoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    matricula?: IntFilter<"Usuario"> | number
    nome?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    admin?: BoolFilter<"Usuario"> | boolean
    isN?: BoolFilter<"Usuario"> | boolean
    token?: StringFilter<"Usuario"> | string
    isAuth?: BoolFilter<"Usuario"> | boolean
    paginas?: PaginaListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    matricula?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    admin?: SortOrder
    isN?: SortOrder
    token?: SortOrder
    isAuth?: SortOrder
    paginas?: PaginaOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    matricula?: number
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nome?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    admin?: BoolFilter<"Usuario"> | boolean
    isN?: BoolFilter<"Usuario"> | boolean
    token?: StringFilter<"Usuario"> | string
    isAuth?: BoolFilter<"Usuario"> | boolean
    paginas?: PaginaListRelationFilter
  }, "matricula">

  export type UsuarioOrderByWithAggregationInput = {
    matricula?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    admin?: SortOrder
    isN?: SortOrder
    token?: SortOrder
    isAuth?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    matricula?: IntWithAggregatesFilter<"Usuario"> | number
    nome?: StringWithAggregatesFilter<"Usuario"> | string
    senha?: StringWithAggregatesFilter<"Usuario"> | string
    admin?: BoolWithAggregatesFilter<"Usuario"> | boolean
    isN?: BoolWithAggregatesFilter<"Usuario"> | boolean
    token?: StringWithAggregatesFilter<"Usuario"> | string
    isAuth?: BoolWithAggregatesFilter<"Usuario"> | boolean
  }

  export type SetoresWhereInput = {
    AND?: SetoresWhereInput | SetoresWhereInput[]
    OR?: SetoresWhereInput[]
    NOT?: SetoresWhereInput | SetoresWhereInput[]
    codigo?: IntFilter<"Setores"> | number
    nome?: StringFilter<"Setores"> | string
    informacoes?: StringFilter<"Setores"> | string
    unidades?: StringFilter<"Setores"> | string
    horario?: StringFilter<"Setores"> | string
    responsavel?: StringFilter<"Setores"> | string
    contato?: StringFilter<"Setores"> | string
  }

  export type SetoresOrderByWithRelationInput = {
    codigo?: SortOrder
    nome?: SortOrder
    informacoes?: SortOrder
    unidades?: SortOrder
    horario?: SortOrder
    responsavel?: SortOrder
    contato?: SortOrder
  }

  export type SetoresWhereUniqueInput = Prisma.AtLeast<{
    codigo?: number
    AND?: SetoresWhereInput | SetoresWhereInput[]
    OR?: SetoresWhereInput[]
    NOT?: SetoresWhereInput | SetoresWhereInput[]
    nome?: StringFilter<"Setores"> | string
    informacoes?: StringFilter<"Setores"> | string
    unidades?: StringFilter<"Setores"> | string
    horario?: StringFilter<"Setores"> | string
    responsavel?: StringFilter<"Setores"> | string
    contato?: StringFilter<"Setores"> | string
  }, "codigo">

  export type SetoresOrderByWithAggregationInput = {
    codigo?: SortOrder
    nome?: SortOrder
    informacoes?: SortOrder
    unidades?: SortOrder
    horario?: SortOrder
    responsavel?: SortOrder
    contato?: SortOrder
    _count?: SetoresCountOrderByAggregateInput
    _avg?: SetoresAvgOrderByAggregateInput
    _max?: SetoresMaxOrderByAggregateInput
    _min?: SetoresMinOrderByAggregateInput
    _sum?: SetoresSumOrderByAggregateInput
  }

  export type SetoresScalarWhereWithAggregatesInput = {
    AND?: SetoresScalarWhereWithAggregatesInput | SetoresScalarWhereWithAggregatesInput[]
    OR?: SetoresScalarWhereWithAggregatesInput[]
    NOT?: SetoresScalarWhereWithAggregatesInput | SetoresScalarWhereWithAggregatesInput[]
    codigo?: IntWithAggregatesFilter<"Setores"> | number
    nome?: StringWithAggregatesFilter<"Setores"> | string
    informacoes?: StringWithAggregatesFilter<"Setores"> | string
    unidades?: StringWithAggregatesFilter<"Setores"> | string
    horario?: StringWithAggregatesFilter<"Setores"> | string
    responsavel?: StringWithAggregatesFilter<"Setores"> | string
    contato?: StringWithAggregatesFilter<"Setores"> | string
  }

  export type CursoWhereInput = {
    AND?: CursoWhereInput | CursoWhereInput[]
    OR?: CursoWhereInput[]
    NOT?: CursoWhereInput | CursoWhereInput[]
    id?: StringFilter<"Curso"> | string
    matricula?: IntFilter<"Curso"> | number
    nome?: StringFilter<"Curso"> | string
    unidade?: StringFilter<"Curso"> | string
    turno?: StringFilter<"Curso"> | string
    informacao?: StringFilter<"Curso"> | string
    imagem?: StringFilter<"Curso"> | string
  }

  export type CursoOrderByWithRelationInput = {
    id?: SortOrder
    matricula?: SortOrder
    nome?: SortOrder
    unidade?: SortOrder
    turno?: SortOrder
    informacao?: SortOrder
    imagem?: SortOrder
  }

  export type CursoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CursoWhereInput | CursoWhereInput[]
    OR?: CursoWhereInput[]
    NOT?: CursoWhereInput | CursoWhereInput[]
    matricula?: IntFilter<"Curso"> | number
    nome?: StringFilter<"Curso"> | string
    unidade?: StringFilter<"Curso"> | string
    turno?: StringFilter<"Curso"> | string
    informacao?: StringFilter<"Curso"> | string
    imagem?: StringFilter<"Curso"> | string
  }, "id">

  export type CursoOrderByWithAggregationInput = {
    id?: SortOrder
    matricula?: SortOrder
    nome?: SortOrder
    unidade?: SortOrder
    turno?: SortOrder
    informacao?: SortOrder
    imagem?: SortOrder
    _count?: CursoCountOrderByAggregateInput
    _avg?: CursoAvgOrderByAggregateInput
    _max?: CursoMaxOrderByAggregateInput
    _min?: CursoMinOrderByAggregateInput
    _sum?: CursoSumOrderByAggregateInput
  }

  export type CursoScalarWhereWithAggregatesInput = {
    AND?: CursoScalarWhereWithAggregatesInput | CursoScalarWhereWithAggregatesInput[]
    OR?: CursoScalarWhereWithAggregatesInput[]
    NOT?: CursoScalarWhereWithAggregatesInput | CursoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Curso"> | string
    matricula?: IntWithAggregatesFilter<"Curso"> | number
    nome?: StringWithAggregatesFilter<"Curso"> | string
    unidade?: StringWithAggregatesFilter<"Curso"> | string
    turno?: StringWithAggregatesFilter<"Curso"> | string
    informacao?: StringWithAggregatesFilter<"Curso"> | string
    imagem?: StringWithAggregatesFilter<"Curso"> | string
  }

  export type CursoValorWhereInput = {
    AND?: CursoValorWhereInput | CursoValorWhereInput[]
    OR?: CursoValorWhereInput[]
    NOT?: CursoValorWhereInput | CursoValorWhereInput[]
    id?: StringFilter<"CursoValor"> | string
    valor_E?: FloatFilter<"CursoValor"> | number
    valor_M?: FloatFilter<"CursoValor"> | number
    nome?: StringFilter<"CursoValor"> | string
    unidade?: StringFilter<"CursoValor"> | string
    turno?: StringFilter<"CursoValor"> | string
  }

  export type CursoValorOrderByWithRelationInput = {
    id?: SortOrder
    valor_E?: SortOrder
    valor_M?: SortOrder
    nome?: SortOrder
    unidade?: SortOrder
    turno?: SortOrder
  }

  export type CursoValorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CursoValorWhereInput | CursoValorWhereInput[]
    OR?: CursoValorWhereInput[]
    NOT?: CursoValorWhereInput | CursoValorWhereInput[]
    valor_E?: FloatFilter<"CursoValor"> | number
    valor_M?: FloatFilter<"CursoValor"> | number
    nome?: StringFilter<"CursoValor"> | string
    unidade?: StringFilter<"CursoValor"> | string
    turno?: StringFilter<"CursoValor"> | string
  }, "id">

  export type CursoValorOrderByWithAggregationInput = {
    id?: SortOrder
    valor_E?: SortOrder
    valor_M?: SortOrder
    nome?: SortOrder
    unidade?: SortOrder
    turno?: SortOrder
    _count?: CursoValorCountOrderByAggregateInput
    _avg?: CursoValorAvgOrderByAggregateInput
    _max?: CursoValorMaxOrderByAggregateInput
    _min?: CursoValorMinOrderByAggregateInput
    _sum?: CursoValorSumOrderByAggregateInput
  }

  export type CursoValorScalarWhereWithAggregatesInput = {
    AND?: CursoValorScalarWhereWithAggregatesInput | CursoValorScalarWhereWithAggregatesInput[]
    OR?: CursoValorScalarWhereWithAggregatesInput[]
    NOT?: CursoValorScalarWhereWithAggregatesInput | CursoValorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CursoValor"> | string
    valor_E?: FloatWithAggregatesFilter<"CursoValor"> | number
    valor_M?: FloatWithAggregatesFilter<"CursoValor"> | number
    nome?: StringWithAggregatesFilter<"CursoValor"> | string
    unidade?: StringWithAggregatesFilter<"CursoValor"> | string
    turno?: StringWithAggregatesFilter<"CursoValor"> | string
  }

  export type ProfessoresWhereInput = {
    AND?: ProfessoresWhereInput | ProfessoresWhereInput[]
    OR?: ProfessoresWhereInput[]
    NOT?: ProfessoresWhereInput | ProfessoresWhereInput[]
    nome?: StringFilter<"Professores"> | string
    materia?: StringFilter<"Professores"> | string
    tit?: StringFilter<"Professores"> | string
    foto?: StringFilter<"Professores"> | string
  }

  export type ProfessoresOrderByWithRelationInput = {
    nome?: SortOrder
    materia?: SortOrder
    tit?: SortOrder
    foto?: SortOrder
  }

  export type ProfessoresWhereUniqueInput = Prisma.AtLeast<{
    nome?: string
    AND?: ProfessoresWhereInput | ProfessoresWhereInput[]
    OR?: ProfessoresWhereInput[]
    NOT?: ProfessoresWhereInput | ProfessoresWhereInput[]
    materia?: StringFilter<"Professores"> | string
    tit?: StringFilter<"Professores"> | string
    foto?: StringFilter<"Professores"> | string
  }, "nome">

  export type ProfessoresOrderByWithAggregationInput = {
    nome?: SortOrder
    materia?: SortOrder
    tit?: SortOrder
    foto?: SortOrder
    _count?: ProfessoresCountOrderByAggregateInput
    _max?: ProfessoresMaxOrderByAggregateInput
    _min?: ProfessoresMinOrderByAggregateInput
  }

  export type ProfessoresScalarWhereWithAggregatesInput = {
    AND?: ProfessoresScalarWhereWithAggregatesInput | ProfessoresScalarWhereWithAggregatesInput[]
    OR?: ProfessoresScalarWhereWithAggregatesInput[]
    NOT?: ProfessoresScalarWhereWithAggregatesInput | ProfessoresScalarWhereWithAggregatesInput[]
    nome?: StringWithAggregatesFilter<"Professores"> | string
    materia?: StringWithAggregatesFilter<"Professores"> | string
    tit?: StringWithAggregatesFilter<"Professores"> | string
    foto?: StringWithAggregatesFilter<"Professores"> | string
  }

  export type UnidadesWhereInput = {
    AND?: UnidadesWhereInput | UnidadesWhereInput[]
    OR?: UnidadesWhereInput[]
    NOT?: UnidadesWhereInput | UnidadesWhereInput[]
    codigo?: StringFilter<"Unidades"> | string
    nome?: StringFilter<"Unidades"> | string
    informacoes?: StringFilter<"Unidades"> | string
    vcep?: StringFilter<"Unidades"> | string
    numeroTel?: StringFilter<"Unidades"> | string
    numeroWpp?: StringFilter<"Unidades"> | string
    horario?: StringFilter<"Unidades"> | string
  }

  export type UnidadesOrderByWithRelationInput = {
    codigo?: SortOrder
    nome?: SortOrder
    informacoes?: SortOrder
    vcep?: SortOrder
    numeroTel?: SortOrder
    numeroWpp?: SortOrder
    horario?: SortOrder
  }

  export type UnidadesWhereUniqueInput = Prisma.AtLeast<{
    codigo?: string
    AND?: UnidadesWhereInput | UnidadesWhereInput[]
    OR?: UnidadesWhereInput[]
    NOT?: UnidadesWhereInput | UnidadesWhereInput[]
    nome?: StringFilter<"Unidades"> | string
    informacoes?: StringFilter<"Unidades"> | string
    vcep?: StringFilter<"Unidades"> | string
    numeroTel?: StringFilter<"Unidades"> | string
    numeroWpp?: StringFilter<"Unidades"> | string
    horario?: StringFilter<"Unidades"> | string
  }, "codigo">

  export type UnidadesOrderByWithAggregationInput = {
    codigo?: SortOrder
    nome?: SortOrder
    informacoes?: SortOrder
    vcep?: SortOrder
    numeroTel?: SortOrder
    numeroWpp?: SortOrder
    horario?: SortOrder
    _count?: UnidadesCountOrderByAggregateInput
    _max?: UnidadesMaxOrderByAggregateInput
    _min?: UnidadesMinOrderByAggregateInput
  }

  export type UnidadesScalarWhereWithAggregatesInput = {
    AND?: UnidadesScalarWhereWithAggregatesInput | UnidadesScalarWhereWithAggregatesInput[]
    OR?: UnidadesScalarWhereWithAggregatesInput[]
    NOT?: UnidadesScalarWhereWithAggregatesInput | UnidadesScalarWhereWithAggregatesInput[]
    codigo?: StringWithAggregatesFilter<"Unidades"> | string
    nome?: StringWithAggregatesFilter<"Unidades"> | string
    informacoes?: StringWithAggregatesFilter<"Unidades"> | string
    vcep?: StringWithAggregatesFilter<"Unidades"> | string
    numeroTel?: StringWithAggregatesFilter<"Unidades"> | string
    numeroWpp?: StringWithAggregatesFilter<"Unidades"> | string
    horario?: StringWithAggregatesFilter<"Unidades"> | string
  }

  export type PaginaWhereInput = {
    AND?: PaginaWhereInput | PaginaWhereInput[]
    OR?: PaginaWhereInput[]
    NOT?: PaginaWhereInput | PaginaWhereInput[]
    id?: StringFilter<"Pagina"> | string
    publica?: BoolFilter<"Pagina"> | boolean
    userId?: IntFilter<"Pagina"> | number
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    tipos?: TipoDocumentoListRelationFilter
  }

  export type PaginaOrderByWithRelationInput = {
    id?: SortOrder
    publica?: SortOrder
    userId?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    tipos?: TipoDocumentoOrderByRelationAggregateInput
  }

  export type PaginaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PaginaWhereInput | PaginaWhereInput[]
    OR?: PaginaWhereInput[]
    NOT?: PaginaWhereInput | PaginaWhereInput[]
    publica?: BoolFilter<"Pagina"> | boolean
    userId?: IntFilter<"Pagina"> | number
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    tipos?: TipoDocumentoListRelationFilter
  }, "id">

  export type PaginaOrderByWithAggregationInput = {
    id?: SortOrder
    publica?: SortOrder
    userId?: SortOrder
    _count?: PaginaCountOrderByAggregateInput
    _avg?: PaginaAvgOrderByAggregateInput
    _max?: PaginaMaxOrderByAggregateInput
    _min?: PaginaMinOrderByAggregateInput
    _sum?: PaginaSumOrderByAggregateInput
  }

  export type PaginaScalarWhereWithAggregatesInput = {
    AND?: PaginaScalarWhereWithAggregatesInput | PaginaScalarWhereWithAggregatesInput[]
    OR?: PaginaScalarWhereWithAggregatesInput[]
    NOT?: PaginaScalarWhereWithAggregatesInput | PaginaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Pagina"> | string
    publica?: BoolWithAggregatesFilter<"Pagina"> | boolean
    userId?: IntWithAggregatesFilter<"Pagina"> | number
  }

  export type TipoDocumentoWhereInput = {
    AND?: TipoDocumentoWhereInput | TipoDocumentoWhereInput[]
    OR?: TipoDocumentoWhereInput[]
    NOT?: TipoDocumentoWhereInput | TipoDocumentoWhereInput[]
    id?: IntFilter<"TipoDocumento"> | number
    type?: IntFilter<"TipoDocumento"> | number
    text?: StringFilter<"TipoDocumento"> | string
    img?: StringFilter<"TipoDocumento"> | string
    paginaId?: StringFilter<"TipoDocumento"> | string
    pagina?: XOR<PaginaRelationFilter, PaginaWhereInput>
  }

  export type TipoDocumentoOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    text?: SortOrder
    img?: SortOrder
    paginaId?: SortOrder
    pagina?: PaginaOrderByWithRelationInput
  }

  export type TipoDocumentoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TipoDocumentoWhereInput | TipoDocumentoWhereInput[]
    OR?: TipoDocumentoWhereInput[]
    NOT?: TipoDocumentoWhereInput | TipoDocumentoWhereInput[]
    type?: IntFilter<"TipoDocumento"> | number
    text?: StringFilter<"TipoDocumento"> | string
    img?: StringFilter<"TipoDocumento"> | string
    paginaId?: StringFilter<"TipoDocumento"> | string
    pagina?: XOR<PaginaRelationFilter, PaginaWhereInput>
  }, "id">

  export type TipoDocumentoOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    text?: SortOrder
    img?: SortOrder
    paginaId?: SortOrder
    _count?: TipoDocumentoCountOrderByAggregateInput
    _avg?: TipoDocumentoAvgOrderByAggregateInput
    _max?: TipoDocumentoMaxOrderByAggregateInput
    _min?: TipoDocumentoMinOrderByAggregateInput
    _sum?: TipoDocumentoSumOrderByAggregateInput
  }

  export type TipoDocumentoScalarWhereWithAggregatesInput = {
    AND?: TipoDocumentoScalarWhereWithAggregatesInput | TipoDocumentoScalarWhereWithAggregatesInput[]
    OR?: TipoDocumentoScalarWhereWithAggregatesInput[]
    NOT?: TipoDocumentoScalarWhereWithAggregatesInput | TipoDocumentoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TipoDocumento"> | number
    type?: IntWithAggregatesFilter<"TipoDocumento"> | number
    text?: StringWithAggregatesFilter<"TipoDocumento"> | string
    img?: StringWithAggregatesFilter<"TipoDocumento"> | string
    paginaId?: StringWithAggregatesFilter<"TipoDocumento"> | string
  }

  export type UsuarioCreateInput = {
    matricula: number
    nome: string
    senha: string
    admin?: boolean
    isN?: boolean
    token?: string
    isAuth?: boolean
    paginas?: PaginaCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    matricula: number
    nome: string
    senha: string
    admin?: boolean
    isN?: boolean
    token?: string
    isAuth?: boolean
    paginas?: PaginaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    matricula?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    isN?: BoolFieldUpdateOperationsInput | boolean
    token?: StringFieldUpdateOperationsInput | string
    isAuth?: BoolFieldUpdateOperationsInput | boolean
    paginas?: PaginaUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    matricula?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    isN?: BoolFieldUpdateOperationsInput | boolean
    token?: StringFieldUpdateOperationsInput | string
    isAuth?: BoolFieldUpdateOperationsInput | boolean
    paginas?: PaginaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    matricula: number
    nome: string
    senha: string
    admin?: boolean
    isN?: boolean
    token?: string
    isAuth?: boolean
  }

  export type UsuarioUpdateManyMutationInput = {
    matricula?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    isN?: BoolFieldUpdateOperationsInput | boolean
    token?: StringFieldUpdateOperationsInput | string
    isAuth?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsuarioUncheckedUpdateManyInput = {
    matricula?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    isN?: BoolFieldUpdateOperationsInput | boolean
    token?: StringFieldUpdateOperationsInput | string
    isAuth?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SetoresCreateInput = {
    codigo: number
    nome: string
    informacoes: string
    unidades: string
    horario: string
    responsavel: string
    contato: string
  }

  export type SetoresUncheckedCreateInput = {
    codigo: number
    nome: string
    informacoes: string
    unidades: string
    horario: string
    responsavel: string
    contato: string
  }

  export type SetoresUpdateInput = {
    codigo?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    informacoes?: StringFieldUpdateOperationsInput | string
    unidades?: StringFieldUpdateOperationsInput | string
    horario?: StringFieldUpdateOperationsInput | string
    responsavel?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
  }

  export type SetoresUncheckedUpdateInput = {
    codigo?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    informacoes?: StringFieldUpdateOperationsInput | string
    unidades?: StringFieldUpdateOperationsInput | string
    horario?: StringFieldUpdateOperationsInput | string
    responsavel?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
  }

  export type SetoresCreateManyInput = {
    codigo: number
    nome: string
    informacoes: string
    unidades: string
    horario: string
    responsavel: string
    contato: string
  }

  export type SetoresUpdateManyMutationInput = {
    codigo?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    informacoes?: StringFieldUpdateOperationsInput | string
    unidades?: StringFieldUpdateOperationsInput | string
    horario?: StringFieldUpdateOperationsInput | string
    responsavel?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
  }

  export type SetoresUncheckedUpdateManyInput = {
    codigo?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    informacoes?: StringFieldUpdateOperationsInput | string
    unidades?: StringFieldUpdateOperationsInput | string
    horario?: StringFieldUpdateOperationsInput | string
    responsavel?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
  }

  export type CursoCreateInput = {
    id?: string
    matricula: number
    nome: string
    unidade: string
    turno: string
    informacao: string
    imagem: string
  }

  export type CursoUncheckedCreateInput = {
    id?: string
    matricula: number
    nome: string
    unidade: string
    turno: string
    informacao: string
    imagem: string
  }

  export type CursoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    matricula?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    unidade?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    informacao?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type CursoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    matricula?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    unidade?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    informacao?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type CursoCreateManyInput = {
    id?: string
    matricula: number
    nome: string
    unidade: string
    turno: string
    informacao: string
    imagem: string
  }

  export type CursoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    matricula?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    unidade?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    informacao?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type CursoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    matricula?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    unidade?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    informacao?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type CursoValorCreateInput = {
    id?: string
    valor_E: number
    valor_M: number
    nome: string
    unidade: string
    turno: string
  }

  export type CursoValorUncheckedCreateInput = {
    id?: string
    valor_E: number
    valor_M: number
    nome: string
    unidade: string
    turno: string
  }

  export type CursoValorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor_E?: FloatFieldUpdateOperationsInput | number
    valor_M?: FloatFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    unidade?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
  }

  export type CursoValorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor_E?: FloatFieldUpdateOperationsInput | number
    valor_M?: FloatFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    unidade?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
  }

  export type CursoValorCreateManyInput = {
    id?: string
    valor_E: number
    valor_M: number
    nome: string
    unidade: string
    turno: string
  }

  export type CursoValorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor_E?: FloatFieldUpdateOperationsInput | number
    valor_M?: FloatFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    unidade?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
  }

  export type CursoValorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor_E?: FloatFieldUpdateOperationsInput | number
    valor_M?: FloatFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    unidade?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessoresCreateInput = {
    nome: string
    materia: string
    tit: string
    foto: string
  }

  export type ProfessoresUncheckedCreateInput = {
    nome: string
    materia: string
    tit: string
    foto: string
  }

  export type ProfessoresUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    materia?: StringFieldUpdateOperationsInput | string
    tit?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessoresUncheckedUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    materia?: StringFieldUpdateOperationsInput | string
    tit?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessoresCreateManyInput = {
    nome: string
    materia: string
    tit: string
    foto: string
  }

  export type ProfessoresUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    materia?: StringFieldUpdateOperationsInput | string
    tit?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessoresUncheckedUpdateManyInput = {
    nome?: StringFieldUpdateOperationsInput | string
    materia?: StringFieldUpdateOperationsInput | string
    tit?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type UnidadesCreateInput = {
    codigo: string
    nome: string
    informacoes: string
    vcep: string
    numeroTel: string
    numeroWpp: string
    horario: string
  }

  export type UnidadesUncheckedCreateInput = {
    codigo: string
    nome: string
    informacoes: string
    vcep: string
    numeroTel: string
    numeroWpp: string
    horario: string
  }

  export type UnidadesUpdateInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    informacoes?: StringFieldUpdateOperationsInput | string
    vcep?: StringFieldUpdateOperationsInput | string
    numeroTel?: StringFieldUpdateOperationsInput | string
    numeroWpp?: StringFieldUpdateOperationsInput | string
    horario?: StringFieldUpdateOperationsInput | string
  }

  export type UnidadesUncheckedUpdateInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    informacoes?: StringFieldUpdateOperationsInput | string
    vcep?: StringFieldUpdateOperationsInput | string
    numeroTel?: StringFieldUpdateOperationsInput | string
    numeroWpp?: StringFieldUpdateOperationsInput | string
    horario?: StringFieldUpdateOperationsInput | string
  }

  export type UnidadesCreateManyInput = {
    codigo: string
    nome: string
    informacoes: string
    vcep: string
    numeroTel: string
    numeroWpp: string
    horario: string
  }

  export type UnidadesUpdateManyMutationInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    informacoes?: StringFieldUpdateOperationsInput | string
    vcep?: StringFieldUpdateOperationsInput | string
    numeroTel?: StringFieldUpdateOperationsInput | string
    numeroWpp?: StringFieldUpdateOperationsInput | string
    horario?: StringFieldUpdateOperationsInput | string
  }

  export type UnidadesUncheckedUpdateManyInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    informacoes?: StringFieldUpdateOperationsInput | string
    vcep?: StringFieldUpdateOperationsInput | string
    numeroTel?: StringFieldUpdateOperationsInput | string
    numeroWpp?: StringFieldUpdateOperationsInput | string
    horario?: StringFieldUpdateOperationsInput | string
  }

  export type PaginaCreateInput = {
    id?: string
    publica?: boolean
    usuario: UsuarioCreateNestedOneWithoutPaginasInput
    tipos?: TipoDocumentoCreateNestedManyWithoutPaginaInput
  }

  export type PaginaUncheckedCreateInput = {
    id?: string
    publica?: boolean
    userId: number
    tipos?: TipoDocumentoUncheckedCreateNestedManyWithoutPaginaInput
  }

  export type PaginaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    publica?: BoolFieldUpdateOperationsInput | boolean
    usuario?: UsuarioUpdateOneRequiredWithoutPaginasNestedInput
    tipos?: TipoDocumentoUpdateManyWithoutPaginaNestedInput
  }

  export type PaginaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    publica?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    tipos?: TipoDocumentoUncheckedUpdateManyWithoutPaginaNestedInput
  }

  export type PaginaCreateManyInput = {
    id?: string
    publica?: boolean
    userId: number
  }

  export type PaginaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    publica?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PaginaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    publica?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type TipoDocumentoCreateInput = {
    type: number
    text: string
    img: string
    pagina: PaginaCreateNestedOneWithoutTiposInput
  }

  export type TipoDocumentoUncheckedCreateInput = {
    id?: number
    type: number
    text: string
    img: string
    paginaId: string
  }

  export type TipoDocumentoUpdateInput = {
    type?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    pagina?: PaginaUpdateOneRequiredWithoutTiposNestedInput
  }

  export type TipoDocumentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    paginaId?: StringFieldUpdateOperationsInput | string
  }

  export type TipoDocumentoCreateManyInput = {
    id?: number
    type: number
    text: string
    img: string
    paginaId: string
  }

  export type TipoDocumentoUpdateManyMutationInput = {
    type?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
  }

  export type TipoDocumentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    paginaId?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PaginaListRelationFilter = {
    every?: PaginaWhereInput
    some?: PaginaWhereInput
    none?: PaginaWhereInput
  }

  export type PaginaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    matricula?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    admin?: SortOrder
    isN?: SortOrder
    token?: SortOrder
    isAuth?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    matricula?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    matricula?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    admin?: SortOrder
    isN?: SortOrder
    token?: SortOrder
    isAuth?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    matricula?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    admin?: SortOrder
    isN?: SortOrder
    token?: SortOrder
    isAuth?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    matricula?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type SetoresCountOrderByAggregateInput = {
    codigo?: SortOrder
    nome?: SortOrder
    informacoes?: SortOrder
    unidades?: SortOrder
    horario?: SortOrder
    responsavel?: SortOrder
    contato?: SortOrder
  }

  export type SetoresAvgOrderByAggregateInput = {
    codigo?: SortOrder
  }

  export type SetoresMaxOrderByAggregateInput = {
    codigo?: SortOrder
    nome?: SortOrder
    informacoes?: SortOrder
    unidades?: SortOrder
    horario?: SortOrder
    responsavel?: SortOrder
    contato?: SortOrder
  }

  export type SetoresMinOrderByAggregateInput = {
    codigo?: SortOrder
    nome?: SortOrder
    informacoes?: SortOrder
    unidades?: SortOrder
    horario?: SortOrder
    responsavel?: SortOrder
    contato?: SortOrder
  }

  export type SetoresSumOrderByAggregateInput = {
    codigo?: SortOrder
  }

  export type CursoCountOrderByAggregateInput = {
    id?: SortOrder
    matricula?: SortOrder
    nome?: SortOrder
    unidade?: SortOrder
    turno?: SortOrder
    informacao?: SortOrder
    imagem?: SortOrder
  }

  export type CursoAvgOrderByAggregateInput = {
    matricula?: SortOrder
  }

  export type CursoMaxOrderByAggregateInput = {
    id?: SortOrder
    matricula?: SortOrder
    nome?: SortOrder
    unidade?: SortOrder
    turno?: SortOrder
    informacao?: SortOrder
    imagem?: SortOrder
  }

  export type CursoMinOrderByAggregateInput = {
    id?: SortOrder
    matricula?: SortOrder
    nome?: SortOrder
    unidade?: SortOrder
    turno?: SortOrder
    informacao?: SortOrder
    imagem?: SortOrder
  }

  export type CursoSumOrderByAggregateInput = {
    matricula?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CursoValorCountOrderByAggregateInput = {
    id?: SortOrder
    valor_E?: SortOrder
    valor_M?: SortOrder
    nome?: SortOrder
    unidade?: SortOrder
    turno?: SortOrder
  }

  export type CursoValorAvgOrderByAggregateInput = {
    valor_E?: SortOrder
    valor_M?: SortOrder
  }

  export type CursoValorMaxOrderByAggregateInput = {
    id?: SortOrder
    valor_E?: SortOrder
    valor_M?: SortOrder
    nome?: SortOrder
    unidade?: SortOrder
    turno?: SortOrder
  }

  export type CursoValorMinOrderByAggregateInput = {
    id?: SortOrder
    valor_E?: SortOrder
    valor_M?: SortOrder
    nome?: SortOrder
    unidade?: SortOrder
    turno?: SortOrder
  }

  export type CursoValorSumOrderByAggregateInput = {
    valor_E?: SortOrder
    valor_M?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ProfessoresCountOrderByAggregateInput = {
    nome?: SortOrder
    materia?: SortOrder
    tit?: SortOrder
    foto?: SortOrder
  }

  export type ProfessoresMaxOrderByAggregateInput = {
    nome?: SortOrder
    materia?: SortOrder
    tit?: SortOrder
    foto?: SortOrder
  }

  export type ProfessoresMinOrderByAggregateInput = {
    nome?: SortOrder
    materia?: SortOrder
    tit?: SortOrder
    foto?: SortOrder
  }

  export type UnidadesCountOrderByAggregateInput = {
    codigo?: SortOrder
    nome?: SortOrder
    informacoes?: SortOrder
    vcep?: SortOrder
    numeroTel?: SortOrder
    numeroWpp?: SortOrder
    horario?: SortOrder
  }

  export type UnidadesMaxOrderByAggregateInput = {
    codigo?: SortOrder
    nome?: SortOrder
    informacoes?: SortOrder
    vcep?: SortOrder
    numeroTel?: SortOrder
    numeroWpp?: SortOrder
    horario?: SortOrder
  }

  export type UnidadesMinOrderByAggregateInput = {
    codigo?: SortOrder
    nome?: SortOrder
    informacoes?: SortOrder
    vcep?: SortOrder
    numeroTel?: SortOrder
    numeroWpp?: SortOrder
    horario?: SortOrder
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type TipoDocumentoListRelationFilter = {
    every?: TipoDocumentoWhereInput
    some?: TipoDocumentoWhereInput
    none?: TipoDocumentoWhereInput
  }

  export type TipoDocumentoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaginaCountOrderByAggregateInput = {
    id?: SortOrder
    publica?: SortOrder
    userId?: SortOrder
  }

  export type PaginaAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type PaginaMaxOrderByAggregateInput = {
    id?: SortOrder
    publica?: SortOrder
    userId?: SortOrder
  }

  export type PaginaMinOrderByAggregateInput = {
    id?: SortOrder
    publica?: SortOrder
    userId?: SortOrder
  }

  export type PaginaSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type PaginaRelationFilter = {
    is?: PaginaWhereInput
    isNot?: PaginaWhereInput
  }

  export type TipoDocumentoCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    text?: SortOrder
    img?: SortOrder
    paginaId?: SortOrder
  }

  export type TipoDocumentoAvgOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type TipoDocumentoMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    text?: SortOrder
    img?: SortOrder
    paginaId?: SortOrder
  }

  export type TipoDocumentoMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    text?: SortOrder
    img?: SortOrder
    paginaId?: SortOrder
  }

  export type TipoDocumentoSumOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type PaginaCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<PaginaCreateWithoutUsuarioInput, PaginaUncheckedCreateWithoutUsuarioInput> | PaginaCreateWithoutUsuarioInput[] | PaginaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: PaginaCreateOrConnectWithoutUsuarioInput | PaginaCreateOrConnectWithoutUsuarioInput[]
    createMany?: PaginaCreateManyUsuarioInputEnvelope
    connect?: PaginaWhereUniqueInput | PaginaWhereUniqueInput[]
  }

  export type PaginaUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<PaginaCreateWithoutUsuarioInput, PaginaUncheckedCreateWithoutUsuarioInput> | PaginaCreateWithoutUsuarioInput[] | PaginaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: PaginaCreateOrConnectWithoutUsuarioInput | PaginaCreateOrConnectWithoutUsuarioInput[]
    createMany?: PaginaCreateManyUsuarioInputEnvelope
    connect?: PaginaWhereUniqueInput | PaginaWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type PaginaUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<PaginaCreateWithoutUsuarioInput, PaginaUncheckedCreateWithoutUsuarioInput> | PaginaCreateWithoutUsuarioInput[] | PaginaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: PaginaCreateOrConnectWithoutUsuarioInput | PaginaCreateOrConnectWithoutUsuarioInput[]
    upsert?: PaginaUpsertWithWhereUniqueWithoutUsuarioInput | PaginaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: PaginaCreateManyUsuarioInputEnvelope
    set?: PaginaWhereUniqueInput | PaginaWhereUniqueInput[]
    disconnect?: PaginaWhereUniqueInput | PaginaWhereUniqueInput[]
    delete?: PaginaWhereUniqueInput | PaginaWhereUniqueInput[]
    connect?: PaginaWhereUniqueInput | PaginaWhereUniqueInput[]
    update?: PaginaUpdateWithWhereUniqueWithoutUsuarioInput | PaginaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: PaginaUpdateManyWithWhereWithoutUsuarioInput | PaginaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: PaginaScalarWhereInput | PaginaScalarWhereInput[]
  }

  export type PaginaUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<PaginaCreateWithoutUsuarioInput, PaginaUncheckedCreateWithoutUsuarioInput> | PaginaCreateWithoutUsuarioInput[] | PaginaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: PaginaCreateOrConnectWithoutUsuarioInput | PaginaCreateOrConnectWithoutUsuarioInput[]
    upsert?: PaginaUpsertWithWhereUniqueWithoutUsuarioInput | PaginaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: PaginaCreateManyUsuarioInputEnvelope
    set?: PaginaWhereUniqueInput | PaginaWhereUniqueInput[]
    disconnect?: PaginaWhereUniqueInput | PaginaWhereUniqueInput[]
    delete?: PaginaWhereUniqueInput | PaginaWhereUniqueInput[]
    connect?: PaginaWhereUniqueInput | PaginaWhereUniqueInput[]
    update?: PaginaUpdateWithWhereUniqueWithoutUsuarioInput | PaginaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: PaginaUpdateManyWithWhereWithoutUsuarioInput | PaginaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: PaginaScalarWhereInput | PaginaScalarWhereInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UsuarioCreateNestedOneWithoutPaginasInput = {
    create?: XOR<UsuarioCreateWithoutPaginasInput, UsuarioUncheckedCreateWithoutPaginasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutPaginasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type TipoDocumentoCreateNestedManyWithoutPaginaInput = {
    create?: XOR<TipoDocumentoCreateWithoutPaginaInput, TipoDocumentoUncheckedCreateWithoutPaginaInput> | TipoDocumentoCreateWithoutPaginaInput[] | TipoDocumentoUncheckedCreateWithoutPaginaInput[]
    connectOrCreate?: TipoDocumentoCreateOrConnectWithoutPaginaInput | TipoDocumentoCreateOrConnectWithoutPaginaInput[]
    createMany?: TipoDocumentoCreateManyPaginaInputEnvelope
    connect?: TipoDocumentoWhereUniqueInput | TipoDocumentoWhereUniqueInput[]
  }

  export type TipoDocumentoUncheckedCreateNestedManyWithoutPaginaInput = {
    create?: XOR<TipoDocumentoCreateWithoutPaginaInput, TipoDocumentoUncheckedCreateWithoutPaginaInput> | TipoDocumentoCreateWithoutPaginaInput[] | TipoDocumentoUncheckedCreateWithoutPaginaInput[]
    connectOrCreate?: TipoDocumentoCreateOrConnectWithoutPaginaInput | TipoDocumentoCreateOrConnectWithoutPaginaInput[]
    createMany?: TipoDocumentoCreateManyPaginaInputEnvelope
    connect?: TipoDocumentoWhereUniqueInput | TipoDocumentoWhereUniqueInput[]
  }

  export type UsuarioUpdateOneRequiredWithoutPaginasNestedInput = {
    create?: XOR<UsuarioCreateWithoutPaginasInput, UsuarioUncheckedCreateWithoutPaginasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutPaginasInput
    upsert?: UsuarioUpsertWithoutPaginasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutPaginasInput, UsuarioUpdateWithoutPaginasInput>, UsuarioUncheckedUpdateWithoutPaginasInput>
  }

  export type TipoDocumentoUpdateManyWithoutPaginaNestedInput = {
    create?: XOR<TipoDocumentoCreateWithoutPaginaInput, TipoDocumentoUncheckedCreateWithoutPaginaInput> | TipoDocumentoCreateWithoutPaginaInput[] | TipoDocumentoUncheckedCreateWithoutPaginaInput[]
    connectOrCreate?: TipoDocumentoCreateOrConnectWithoutPaginaInput | TipoDocumentoCreateOrConnectWithoutPaginaInput[]
    upsert?: TipoDocumentoUpsertWithWhereUniqueWithoutPaginaInput | TipoDocumentoUpsertWithWhereUniqueWithoutPaginaInput[]
    createMany?: TipoDocumentoCreateManyPaginaInputEnvelope
    set?: TipoDocumentoWhereUniqueInput | TipoDocumentoWhereUniqueInput[]
    disconnect?: TipoDocumentoWhereUniqueInput | TipoDocumentoWhereUniqueInput[]
    delete?: TipoDocumentoWhereUniqueInput | TipoDocumentoWhereUniqueInput[]
    connect?: TipoDocumentoWhereUniqueInput | TipoDocumentoWhereUniqueInput[]
    update?: TipoDocumentoUpdateWithWhereUniqueWithoutPaginaInput | TipoDocumentoUpdateWithWhereUniqueWithoutPaginaInput[]
    updateMany?: TipoDocumentoUpdateManyWithWhereWithoutPaginaInput | TipoDocumentoUpdateManyWithWhereWithoutPaginaInput[]
    deleteMany?: TipoDocumentoScalarWhereInput | TipoDocumentoScalarWhereInput[]
  }

  export type TipoDocumentoUncheckedUpdateManyWithoutPaginaNestedInput = {
    create?: XOR<TipoDocumentoCreateWithoutPaginaInput, TipoDocumentoUncheckedCreateWithoutPaginaInput> | TipoDocumentoCreateWithoutPaginaInput[] | TipoDocumentoUncheckedCreateWithoutPaginaInput[]
    connectOrCreate?: TipoDocumentoCreateOrConnectWithoutPaginaInput | TipoDocumentoCreateOrConnectWithoutPaginaInput[]
    upsert?: TipoDocumentoUpsertWithWhereUniqueWithoutPaginaInput | TipoDocumentoUpsertWithWhereUniqueWithoutPaginaInput[]
    createMany?: TipoDocumentoCreateManyPaginaInputEnvelope
    set?: TipoDocumentoWhereUniqueInput | TipoDocumentoWhereUniqueInput[]
    disconnect?: TipoDocumentoWhereUniqueInput | TipoDocumentoWhereUniqueInput[]
    delete?: TipoDocumentoWhereUniqueInput | TipoDocumentoWhereUniqueInput[]
    connect?: TipoDocumentoWhereUniqueInput | TipoDocumentoWhereUniqueInput[]
    update?: TipoDocumentoUpdateWithWhereUniqueWithoutPaginaInput | TipoDocumentoUpdateWithWhereUniqueWithoutPaginaInput[]
    updateMany?: TipoDocumentoUpdateManyWithWhereWithoutPaginaInput | TipoDocumentoUpdateManyWithWhereWithoutPaginaInput[]
    deleteMany?: TipoDocumentoScalarWhereInput | TipoDocumentoScalarWhereInput[]
  }

  export type PaginaCreateNestedOneWithoutTiposInput = {
    create?: XOR<PaginaCreateWithoutTiposInput, PaginaUncheckedCreateWithoutTiposInput>
    connectOrCreate?: PaginaCreateOrConnectWithoutTiposInput
    connect?: PaginaWhereUniqueInput
  }

  export type PaginaUpdateOneRequiredWithoutTiposNestedInput = {
    create?: XOR<PaginaCreateWithoutTiposInput, PaginaUncheckedCreateWithoutTiposInput>
    connectOrCreate?: PaginaCreateOrConnectWithoutTiposInput
    upsert?: PaginaUpsertWithoutTiposInput
    connect?: PaginaWhereUniqueInput
    update?: XOR<XOR<PaginaUpdateToOneWithWhereWithoutTiposInput, PaginaUpdateWithoutTiposInput>, PaginaUncheckedUpdateWithoutTiposInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type PaginaCreateWithoutUsuarioInput = {
    id?: string
    publica?: boolean
    tipos?: TipoDocumentoCreateNestedManyWithoutPaginaInput
  }

  export type PaginaUncheckedCreateWithoutUsuarioInput = {
    id?: string
    publica?: boolean
    tipos?: TipoDocumentoUncheckedCreateNestedManyWithoutPaginaInput
  }

  export type PaginaCreateOrConnectWithoutUsuarioInput = {
    where: PaginaWhereUniqueInput
    create: XOR<PaginaCreateWithoutUsuarioInput, PaginaUncheckedCreateWithoutUsuarioInput>
  }

  export type PaginaCreateManyUsuarioInputEnvelope = {
    data: PaginaCreateManyUsuarioInput | PaginaCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type PaginaUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: PaginaWhereUniqueInput
    update: XOR<PaginaUpdateWithoutUsuarioInput, PaginaUncheckedUpdateWithoutUsuarioInput>
    create: XOR<PaginaCreateWithoutUsuarioInput, PaginaUncheckedCreateWithoutUsuarioInput>
  }

  export type PaginaUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: PaginaWhereUniqueInput
    data: XOR<PaginaUpdateWithoutUsuarioInput, PaginaUncheckedUpdateWithoutUsuarioInput>
  }

  export type PaginaUpdateManyWithWhereWithoutUsuarioInput = {
    where: PaginaScalarWhereInput
    data: XOR<PaginaUpdateManyMutationInput, PaginaUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type PaginaScalarWhereInput = {
    AND?: PaginaScalarWhereInput | PaginaScalarWhereInput[]
    OR?: PaginaScalarWhereInput[]
    NOT?: PaginaScalarWhereInput | PaginaScalarWhereInput[]
    id?: StringFilter<"Pagina"> | string
    publica?: BoolFilter<"Pagina"> | boolean
    userId?: IntFilter<"Pagina"> | number
  }

  export type UsuarioCreateWithoutPaginasInput = {
    matricula: number
    nome: string
    senha: string
    admin?: boolean
    isN?: boolean
    token?: string
    isAuth?: boolean
  }

  export type UsuarioUncheckedCreateWithoutPaginasInput = {
    matricula: number
    nome: string
    senha: string
    admin?: boolean
    isN?: boolean
    token?: string
    isAuth?: boolean
  }

  export type UsuarioCreateOrConnectWithoutPaginasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutPaginasInput, UsuarioUncheckedCreateWithoutPaginasInput>
  }

  export type TipoDocumentoCreateWithoutPaginaInput = {
    type: number
    text: string
    img: string
  }

  export type TipoDocumentoUncheckedCreateWithoutPaginaInput = {
    id?: number
    type: number
    text: string
    img: string
  }

  export type TipoDocumentoCreateOrConnectWithoutPaginaInput = {
    where: TipoDocumentoWhereUniqueInput
    create: XOR<TipoDocumentoCreateWithoutPaginaInput, TipoDocumentoUncheckedCreateWithoutPaginaInput>
  }

  export type TipoDocumentoCreateManyPaginaInputEnvelope = {
    data: TipoDocumentoCreateManyPaginaInput | TipoDocumentoCreateManyPaginaInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithoutPaginasInput = {
    update: XOR<UsuarioUpdateWithoutPaginasInput, UsuarioUncheckedUpdateWithoutPaginasInput>
    create: XOR<UsuarioCreateWithoutPaginasInput, UsuarioUncheckedCreateWithoutPaginasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutPaginasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutPaginasInput, UsuarioUncheckedUpdateWithoutPaginasInput>
  }

  export type UsuarioUpdateWithoutPaginasInput = {
    matricula?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    isN?: BoolFieldUpdateOperationsInput | boolean
    token?: StringFieldUpdateOperationsInput | string
    isAuth?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsuarioUncheckedUpdateWithoutPaginasInput = {
    matricula?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    isN?: BoolFieldUpdateOperationsInput | boolean
    token?: StringFieldUpdateOperationsInput | string
    isAuth?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TipoDocumentoUpsertWithWhereUniqueWithoutPaginaInput = {
    where: TipoDocumentoWhereUniqueInput
    update: XOR<TipoDocumentoUpdateWithoutPaginaInput, TipoDocumentoUncheckedUpdateWithoutPaginaInput>
    create: XOR<TipoDocumentoCreateWithoutPaginaInput, TipoDocumentoUncheckedCreateWithoutPaginaInput>
  }

  export type TipoDocumentoUpdateWithWhereUniqueWithoutPaginaInput = {
    where: TipoDocumentoWhereUniqueInput
    data: XOR<TipoDocumentoUpdateWithoutPaginaInput, TipoDocumentoUncheckedUpdateWithoutPaginaInput>
  }

  export type TipoDocumentoUpdateManyWithWhereWithoutPaginaInput = {
    where: TipoDocumentoScalarWhereInput
    data: XOR<TipoDocumentoUpdateManyMutationInput, TipoDocumentoUncheckedUpdateManyWithoutPaginaInput>
  }

  export type TipoDocumentoScalarWhereInput = {
    AND?: TipoDocumentoScalarWhereInput | TipoDocumentoScalarWhereInput[]
    OR?: TipoDocumentoScalarWhereInput[]
    NOT?: TipoDocumentoScalarWhereInput | TipoDocumentoScalarWhereInput[]
    id?: IntFilter<"TipoDocumento"> | number
    type?: IntFilter<"TipoDocumento"> | number
    text?: StringFilter<"TipoDocumento"> | string
    img?: StringFilter<"TipoDocumento"> | string
    paginaId?: StringFilter<"TipoDocumento"> | string
  }

  export type PaginaCreateWithoutTiposInput = {
    id?: string
    publica?: boolean
    usuario: UsuarioCreateNestedOneWithoutPaginasInput
  }

  export type PaginaUncheckedCreateWithoutTiposInput = {
    id?: string
    publica?: boolean
    userId: number
  }

  export type PaginaCreateOrConnectWithoutTiposInput = {
    where: PaginaWhereUniqueInput
    create: XOR<PaginaCreateWithoutTiposInput, PaginaUncheckedCreateWithoutTiposInput>
  }

  export type PaginaUpsertWithoutTiposInput = {
    update: XOR<PaginaUpdateWithoutTiposInput, PaginaUncheckedUpdateWithoutTiposInput>
    create: XOR<PaginaCreateWithoutTiposInput, PaginaUncheckedCreateWithoutTiposInput>
    where?: PaginaWhereInput
  }

  export type PaginaUpdateToOneWithWhereWithoutTiposInput = {
    where?: PaginaWhereInput
    data: XOR<PaginaUpdateWithoutTiposInput, PaginaUncheckedUpdateWithoutTiposInput>
  }

  export type PaginaUpdateWithoutTiposInput = {
    id?: StringFieldUpdateOperationsInput | string
    publica?: BoolFieldUpdateOperationsInput | boolean
    usuario?: UsuarioUpdateOneRequiredWithoutPaginasNestedInput
  }

  export type PaginaUncheckedUpdateWithoutTiposInput = {
    id?: StringFieldUpdateOperationsInput | string
    publica?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type PaginaCreateManyUsuarioInput = {
    id?: string
    publica?: boolean
  }

  export type PaginaUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    publica?: BoolFieldUpdateOperationsInput | boolean
    tipos?: TipoDocumentoUpdateManyWithoutPaginaNestedInput
  }

  export type PaginaUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    publica?: BoolFieldUpdateOperationsInput | boolean
    tipos?: TipoDocumentoUncheckedUpdateManyWithoutPaginaNestedInput
  }

  export type PaginaUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    publica?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TipoDocumentoCreateManyPaginaInput = {
    id?: number
    type: number
    text: string
    img: string
  }

  export type TipoDocumentoUpdateWithoutPaginaInput = {
    type?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
  }

  export type TipoDocumentoUncheckedUpdateWithoutPaginaInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
  }

  export type TipoDocumentoUncheckedUpdateManyWithoutPaginaInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaginaCountOutputTypeDefaultArgs instead
     */
    export type PaginaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaginaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioDefaultArgs instead
     */
    export type UsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SetoresDefaultArgs instead
     */
    export type SetoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SetoresDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CursoDefaultArgs instead
     */
    export type CursoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CursoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CursoValorDefaultArgs instead
     */
    export type CursoValorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CursoValorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfessoresDefaultArgs instead
     */
    export type ProfessoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfessoresDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UnidadesDefaultArgs instead
     */
    export type UnidadesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UnidadesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaginaDefaultArgs instead
     */
    export type PaginaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaginaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TipoDocumentoDefaultArgs instead
     */
    export type TipoDocumentoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TipoDocumentoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}