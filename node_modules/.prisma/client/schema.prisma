generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  matricula Int      @id
  nome      String
  senha     String
  admin     Boolean  @default(false)
  isN       Boolean  @default(false)
  token     String   @default(" ")
  isAuth    Boolean  @default(false)
  paginas   Pagina[]
}

model Setores {
  codigo      Int    @id
  nome        String
  informacoes String
  unidades    String
  horario     String
  responsavel String
  contato     String
}

model Curso {
  id         String         @id @default(uuid()) @map(name: "id")
  matricula  Int
  nome       String
  unidade    String
  turno      String
  informacao String
  imagem     String
  unidades   CursoUnidade[]
  createdAt  DateTime       @default(now())
  active     Boolean        @default(true)
}

model CursoValor {
  id        String   @id @default(uuid()) @map(name: "id")
  valor_E   Float
  valor_M   Float
  nome      String
  unidade   String
  turno     String
  createdAt DateTime @default(now())
  active    Boolean  @default(true)
}

model Professores {
  nome      String   @id @default(uuid()) @map(name: "id")
  materia   String
  tit       String
  foto      String
  createdAt DateTime @default(now())
  active    Boolean  @default(true)
}

model Unidades {
  codigo      String         @id @default(uuid()) @map(name: "id")
  nome        String
  informacoes String
  vcep        String
  numeroTel   String
  numeroWpp   String
  horario     String
  imagem      String
  cursos      CursoUnidade[]
  createdAt   DateTime       @default(now())
  active      Boolean        @default(true)
}

model CursoUnidade {
  cursoId   String
  unidadeId String
  curso     Curso    @relation(fields: [cursoId], references: [id])
  unidade   Unidades @relation(fields: [unidadeId], references: [codigo])
  active    Boolean  @default(true)
  createdAt DateTime @default(now())

  @@id([cursoId, unidadeId])
}

model Pagina {
  id        String          @id @default(uuid()) @map(name: "id")
  nome      String
  publica   Boolean         @default(false)
  userId    Int
  usuario   Usuario         @relation(fields: [userId], references: [matricula])
  tipos     TipoDocumento[]
  active    Boolean         @default(true)
  createdAt DateTime        @default(now())
}

model TipoDocumento {
  id       Int    @id @default(autoincrement())
  type     Int
  text     String
  img      String
  paginaId String
  pagina   Pagina @relation(fields: [paginaId], references: [id])
}

model CarouselItem {
  id        String   @id @default(uuid()) @map(name: "id")
  image     String
  alt       String
  caption   String
  createdAt DateTime @default(now()) @map(name: "created_at")

  @@map(name: "carousel_items")
}

model PdfFile {
  id        String   @id @default(uuid()) @map(name: "id")
  url       String
  createdAt DateTime @default(now()) @map(name: "created_at")

  @@map(name: "pdf_files")
}

model Aviso {
  id        String   @id @default(uuid()) @map(name: "id")
  titulo    String
  conteudo  String
  alertas   String[]
  createdAt DateTime @default(now()) @map(name: "created_at")

  @@map(name: "avisos")
}
